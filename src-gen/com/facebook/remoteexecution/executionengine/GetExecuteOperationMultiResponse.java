/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GetExecuteOperationMultiResponse implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GetExecuteOperationMultiResponse");
  private static final TField OPERATIONS_FIELD_DESC = new TField("operations", TType.MAP, (short)1);

  public Map<String,ExecuteOperation> operations;
  public static final int OPERATIONS = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OPERATIONS, new FieldMetaData("operations", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, ExecuteOperation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(GetExecuteOperationMultiResponse.class, metaDataMap);
  }

  public GetExecuteOperationMultiResponse() {
  }

  public GetExecuteOperationMultiResponse(
    Map<String,ExecuteOperation> operations)
  {
    this();
    this.operations = operations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetExecuteOperationMultiResponse(GetExecuteOperationMultiResponse other) {
    if (other.isSetOperations()) {
      this.operations = TBaseHelper.deepCopy(other.operations);
    }
  }

  public GetExecuteOperationMultiResponse deepCopy() {
    return new GetExecuteOperationMultiResponse(this);
  }

  @Deprecated
  public GetExecuteOperationMultiResponse clone() {
    return new GetExecuteOperationMultiResponse(this);
  }

  public Map<String,ExecuteOperation>  getOperations() {
    return this.operations;
  }

  public GetExecuteOperationMultiResponse setOperations(Map<String,ExecuteOperation> operations) {
    this.operations = operations;
    return this;
  }

  public void unsetOperations() {
    this.operations = null;
  }

  // Returns true if field operations is set (has been assigned a value) and false otherwise
  public boolean isSetOperations() {
    return this.operations != null;
  }

  public void setOperationsIsSet(boolean value) {
    if (!value) {
      this.operations = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case OPERATIONS:
      if (value == null) {
        unsetOperations();
      } else {
        setOperations((Map<String,ExecuteOperation>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OPERATIONS:
      return getOperations();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case OPERATIONS:
      return isSetOperations();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetExecuteOperationMultiResponse)
      return this.equals((GetExecuteOperationMultiResponse)that);
    return false;
  }

  public boolean equals(GetExecuteOperationMultiResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operations = true && this.isSetOperations();
    boolean that_present_operations = true && that.isSetOperations();
    if (this_present_operations || that_present_operations) {
      if (!(this_present_operations && that_present_operations))
        return false;
      if (!TBaseHelper.equalsNobinary(this.operations, that.operations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case OPERATIONS:
          if (field.type == TType.MAP) {
            {
              TMap _map41 = iprot.readMapBegin();
              this.operations = new HashMap<String,ExecuteOperation>(Math.max(0, 2*_map41.size));
              for (int _i42 = 0; 
                   (_map41.size < 0) ? iprot.peekMap() : (_i42 < _map41.size); 
                   ++_i42)
              {
                String _key43;
                ExecuteOperation _val44;
                _key43 = iprot.readString();
                _val44 = new ExecuteOperation();
                _val44.read(iprot);
                this.operations.put(_key43, _val44);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.operations != null) {
      oprot.writeFieldBegin(OPERATIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.operations.size()));
        for (Map.Entry<String, ExecuteOperation> _iter45 : this.operations.entrySet())        {
          oprot.writeString(_iter45.getKey());
          _iter45.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("GetExecuteOperationMultiResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("operations");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getOperations() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getOperations(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

