/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ExecutionResult implements TBase, java.io.Serializable, Cloneable, Comparable<ExecutionResult> {
  private static final TStruct STRUCT_DESC = new TStruct("ExecutionResult");
  private static final TField ACTION_RESULT_FIELD_DESC = new TField("action_result", TType.STRUCT, (short)1);
  private static final TField CACHED_RESULT_FIELD_DESC = new TField("cached_result", TType.BOOL, (short)2);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)3);

  public ActionResult action_result;
  public boolean cached_result;
  /**
   * 
   * @see ExecutionStatus
   */
  public int status;
  public static final int ACTION_RESULT = 1;
  public static final int CACHED_RESULT = 2;
  public static final int STATUS = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __CACHED_RESULT_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ACTION_RESULT, new FieldMetaData("action_result", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ActionResult.class)));
    tmpMetaDataMap.put(CACHED_RESULT, new FieldMetaData("cached_result", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ExecutionResult.class, metaDataMap);
  }

  public ExecutionResult() {
  }

  public ExecutionResult(
    boolean cached_result,
    int status)
  {
    this();
    this.cached_result = cached_result;
    setCached_resultIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  public ExecutionResult(
    ActionResult action_result,
    boolean cached_result,
    int status)
  {
    this();
    this.action_result = action_result;
    this.cached_result = cached_result;
    setCached_resultIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecutionResult(ExecutionResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAction_result()) {
      this.action_result = TBaseHelper.deepCopy(other.action_result);
    }
    this.cached_result = TBaseHelper.deepCopy(other.cached_result);
    this.status = TBaseHelper.deepCopy(other.status);
  }

  public ExecutionResult deepCopy() {
    return new ExecutionResult(this);
  }

  @Deprecated
  public ExecutionResult clone() {
    return new ExecutionResult(this);
  }

  public ActionResult  getAction_result() {
    return this.action_result;
  }

  public ExecutionResult setAction_result(ActionResult action_result) {
    this.action_result = action_result;
    return this;
  }

  public void unsetAction_result() {
    this.action_result = null;
  }

  // Returns true if field action_result is set (has been assigned a value) and false otherwise
  public boolean isSetAction_result() {
    return this.action_result != null;
  }

  public void setAction_resultIsSet(boolean value) {
    if (!value) {
      this.action_result = null;
    }
  }

  public boolean  isCached_result() {
    return this.cached_result;
  }

  public ExecutionResult setCached_result(boolean cached_result) {
    this.cached_result = cached_result;
    setCached_resultIsSet(true);
    return this;
  }

  public void unsetCached_result() {
    __isset_bit_vector.clear(__CACHED_RESULT_ISSET_ID);
  }

  // Returns true if field cached_result is set (has been assigned a value) and false otherwise
  public boolean isSetCached_result() {
    return __isset_bit_vector.get(__CACHED_RESULT_ISSET_ID);
  }

  public void setCached_resultIsSet(boolean value) {
    __isset_bit_vector.set(__CACHED_RESULT_ISSET_ID, value);
  }

  /**
   * 
   * @see ExecutionStatus
   */
  public int  getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ExecutionStatus
   */
  public ExecutionResult setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  // Returns true if field status is set (has been assigned a value) and false otherwise
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ACTION_RESULT:
      if (value == null) {
        unsetAction_result();
      } else {
        setAction_result((ActionResult)value);
      }
      break;

    case CACHED_RESULT:
      if (value == null) {
        unsetCached_result();
      } else {
        setCached_result((Boolean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ACTION_RESULT:
      return getAction_result();

    case CACHED_RESULT:
      return new Boolean(isCached_result());

    case STATUS:
      return getStatus();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ACTION_RESULT:
      return isSetAction_result();
    case CACHED_RESULT:
      return isSetCached_result();
    case STATUS:
      return isSetStatus();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecutionResult)
      return this.equals((ExecutionResult)that);
    return false;
  }

  public boolean equals(ExecutionResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_action_result = true && this.isSetAction_result();
    boolean that_present_action_result = true && that.isSetAction_result();
    if (this_present_action_result || that_present_action_result) {
      if (!(this_present_action_result && that_present_action_result))
        return false;
      if (!TBaseHelper.equalsNobinary(this.action_result, that.action_result))
        return false;
    }

    boolean this_present_cached_result = true;
    boolean that_present_cached_result = true;
    if (this_present_cached_result || that_present_cached_result) {
      if (!(this_present_cached_result && that_present_cached_result))
        return false;
      if (!TBaseHelper.equalsNobinary(this.cached_result, that.cached_result))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status, that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExecutionResult other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAction_result()).compareTo(other.isSetAction_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(action_result, other.action_result);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCached_result()).compareTo(other.isSetCached_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cached_result, other.cached_result);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, other.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ACTION_RESULT:
          if (field.type == TType.STRUCT) {
            this.action_result = new ActionResult();
            this.action_result.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CACHED_RESULT:
          if (field.type == TType.BOOL) {
            this.cached_result = iprot.readBool();
            setCached_resultIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.action_result != null) {
      if (isSetAction_result()) {
        oprot.writeFieldBegin(ACTION_RESULT_FIELD_DESC);
        this.action_result.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(CACHED_RESULT_FIELD_DESC);
    oprot.writeBool(this.cached_result);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ExecutionResult");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetAction_result())
    {
      sb.append(indentStr);
      sb.append("action_result");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getAction_result() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getAction_result(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("cached_result");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isCached_result(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("status");
    sb.append(space);
    sb.append(":").append(space);
    String status_name = ExecutionStatus.VALUES_TO_NAMES.get(this. getStatus());
    if (status_name != null) {
      sb.append(status_name);
      sb.append(" (");
    }
    sb.append(this. getStatus());
    if (status_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !ExecutionStatus.VALID_VALUES.contains(status)){
      throw new TProtocolException("The field 'status' has been assigned the invalid value " + status);
    }
  }

}

