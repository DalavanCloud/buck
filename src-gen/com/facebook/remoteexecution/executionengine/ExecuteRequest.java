/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ExecuteRequest implements TBase, java.io.Serializable, Cloneable, Comparable<ExecuteRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("ExecuteRequest");
  private static final TField INSTANCE_NAME_FIELD_DESC = new TField("instance_name", TType.STRING, (short)1);
  private static final TField ACTION_FIELD_DESC = new TField("action", TType.STRUCT, (short)2);
  private static final TField SKIP_CACHE_LOOKUP_FIELD_DESC = new TField("skip_cache_lookup", TType.BOOL, (short)3);
  private static final TField EXECUTION_ID_FIELD_DESC = new TField("execution_id", TType.STRING, (short)4);

  public String instance_name;
  public Action action;
  public boolean skip_cache_lookup;
  public String execution_id;
  public static final int INSTANCE_NAME = 1;
  public static final int ACTION = 2;
  public static final int SKIP_CACHE_LOOKUP = 3;
  public static final int EXECUTION_ID = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SKIP_CACHE_LOOKUP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(INSTANCE_NAME, new FieldMetaData("instance_name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ACTION, new FieldMetaData("action", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Action.class)));
    tmpMetaDataMap.put(SKIP_CACHE_LOOKUP, new FieldMetaData("skip_cache_lookup", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(EXECUTION_ID, new FieldMetaData("execution_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ExecuteRequest.class, metaDataMap);
  }

  public ExecuteRequest() {
  }

  public ExecuteRequest(
    String instance_name,
    Action action,
    boolean skip_cache_lookup)
  {
    this();
    this.instance_name = instance_name;
    this.action = action;
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
  }

  public ExecuteRequest(
    String instance_name,
    Action action,
    boolean skip_cache_lookup,
    String execution_id)
  {
    this();
    this.instance_name = instance_name;
    this.action = action;
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    this.execution_id = execution_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteRequest(ExecuteRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetInstance_name()) {
      this.instance_name = TBaseHelper.deepCopy(other.instance_name);
    }
    if (other.isSetAction()) {
      this.action = TBaseHelper.deepCopy(other.action);
    }
    this.skip_cache_lookup = TBaseHelper.deepCopy(other.skip_cache_lookup);
    if (other.isSetExecution_id()) {
      this.execution_id = TBaseHelper.deepCopy(other.execution_id);
    }
  }

  public ExecuteRequest deepCopy() {
    return new ExecuteRequest(this);
  }

  @Deprecated
  public ExecuteRequest clone() {
    return new ExecuteRequest(this);
  }

  public String  getInstance_name() {
    return this.instance_name;
  }

  public ExecuteRequest setInstance_name(String instance_name) {
    this.instance_name = instance_name;
    return this;
  }

  public void unsetInstance_name() {
    this.instance_name = null;
  }

  // Returns true if field instance_name is set (has been assigned a value) and false otherwise
  public boolean isSetInstance_name() {
    return this.instance_name != null;
  }

  public void setInstance_nameIsSet(boolean value) {
    if (!value) {
      this.instance_name = null;
    }
  }

  public Action  getAction() {
    return this.action;
  }

  public ExecuteRequest setAction(Action action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  // Returns true if field action is set (has been assigned a value) and false otherwise
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public boolean  isSkip_cache_lookup() {
    return this.skip_cache_lookup;
  }

  public ExecuteRequest setSkip_cache_lookup(boolean skip_cache_lookup) {
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    return this;
  }

  public void unsetSkip_cache_lookup() {
    __isset_bit_vector.clear(__SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  // Returns true if field skip_cache_lookup is set (has been assigned a value) and false otherwise
  public boolean isSetSkip_cache_lookup() {
    return __isset_bit_vector.get(__SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  public void setSkip_cache_lookupIsSet(boolean value) {
    __isset_bit_vector.set(__SKIP_CACHE_LOOKUP_ISSET_ID, value);
  }

  public String  getExecution_id() {
    return this.execution_id;
  }

  public ExecuteRequest setExecution_id(String execution_id) {
    this.execution_id = execution_id;
    return this;
  }

  public void unsetExecution_id() {
    this.execution_id = null;
  }

  // Returns true if field execution_id is set (has been assigned a value) and false otherwise
  public boolean isSetExecution_id() {
    return this.execution_id != null;
  }

  public void setExecution_idIsSet(boolean value) {
    if (!value) {
      this.execution_id = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case INSTANCE_NAME:
      if (value == null) {
        unsetInstance_name();
      } else {
        setInstance_name((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((Action)value);
      }
      break;

    case SKIP_CACHE_LOOKUP:
      if (value == null) {
        unsetSkip_cache_lookup();
      } else {
        setSkip_cache_lookup((Boolean)value);
      }
      break;

    case EXECUTION_ID:
      if (value == null) {
        unsetExecution_id();
      } else {
        setExecution_id((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case INSTANCE_NAME:
      return getInstance_name();

    case ACTION:
      return getAction();

    case SKIP_CACHE_LOOKUP:
      return new Boolean(isSkip_cache_lookup());

    case EXECUTION_ID:
      return getExecution_id();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case INSTANCE_NAME:
      return isSetInstance_name();
    case ACTION:
      return isSetAction();
    case SKIP_CACHE_LOOKUP:
      return isSetSkip_cache_lookup();
    case EXECUTION_ID:
      return isSetExecution_id();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteRequest)
      return this.equals((ExecuteRequest)that);
    return false;
  }

  public boolean equals(ExecuteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_instance_name = true && this.isSetInstance_name();
    boolean that_present_instance_name = true && that.isSetInstance_name();
    if (this_present_instance_name || that_present_instance_name) {
      if (!(this_present_instance_name && that_present_instance_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.instance_name, that.instance_name))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!TBaseHelper.equalsNobinary(this.action, that.action))
        return false;
    }

    boolean this_present_skip_cache_lookup = true;
    boolean that_present_skip_cache_lookup = true;
    if (this_present_skip_cache_lookup || that_present_skip_cache_lookup) {
      if (!(this_present_skip_cache_lookup && that_present_skip_cache_lookup))
        return false;
      if (!TBaseHelper.equalsNobinary(this.skip_cache_lookup, that.skip_cache_lookup))
        return false;
    }

    boolean this_present_execution_id = true && this.isSetExecution_id();
    boolean that_present_execution_id = true && that.isSetExecution_id();
    if (this_present_execution_id || that_present_execution_id) {
      if (!(this_present_execution_id && that_present_execution_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.execution_id, that.execution_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExecuteRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstance_name()).compareTo(other.isSetInstance_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(instance_name, other.instance_name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(action, other.action);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSkip_cache_lookup()).compareTo(other.isSetSkip_cache_lookup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(skip_cache_lookup, other.skip_cache_lookup);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExecution_id()).compareTo(other.isSetExecution_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(execution_id, other.execution_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case INSTANCE_NAME:
          if (field.type == TType.STRING) {
            this.instance_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACTION:
          if (field.type == TType.STRUCT) {
            this.action = new Action();
            this.action.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SKIP_CACHE_LOOKUP:
          if (field.type == TType.BOOL) {
            this.skip_cache_lookup = iprot.readBool();
            setSkip_cache_lookupIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_ID:
          if (field.type == TType.STRING) {
            this.execution_id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.instance_name != null) {
      oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
      oprot.writeString(this.instance_name);
      oprot.writeFieldEnd();
    }
    if (this.action != null) {
      oprot.writeFieldBegin(ACTION_FIELD_DESC);
      this.action.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SKIP_CACHE_LOOKUP_FIELD_DESC);
    oprot.writeBool(this.skip_cache_lookup);
    oprot.writeFieldEnd();
    if (this.execution_id != null) {
      if (isSetExecution_id()) {
        oprot.writeFieldBegin(EXECUTION_ID_FIELD_DESC);
        oprot.writeString(this.execution_id);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ExecuteRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("instance_name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getInstance_name() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getInstance_name(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("action");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAction() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getAction(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("skip_cache_lookup");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isSkip_cache_lookup(), indent + 1, prettyPrint));
    first = false;
    if (isSetExecution_id())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("execution_id");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getExecution_id() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getExecution_id(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

