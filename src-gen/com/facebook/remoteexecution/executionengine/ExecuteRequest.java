/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ExecuteRequest implements TBase, java.io.Serializable, Cloneable, Comparable<ExecuteRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("ExecuteRequest");
  private static final TField SKIP_CACHE_LOOKUP_FIELD_DESC = new TField("skip_cache_lookup", TType.BOOL, (short)1);
  private static final TField ACTION_DIGEST_FIELD_DESC = new TField("action_digest", TType.STRUCT, (short)2);
  private static final TField EXECUTION_POLICY_FIELD_DESC = new TField("execution_policy", TType.STRUCT, (short)3);
  private static final TField RESULTS_CACHE_POLICY_FIELD_DESC = new TField("results_cache_policy", TType.STRUCT, (short)4);
  private static final TField METADATA_FIELD_DESC = new TField("metadata", TType.STRUCT, (short)5);

  public boolean skip_cache_lookup;
  public com.facebook.remoteexecution.cas.Digest action_digest;
  public ExecutionPolicy execution_policy;
  public ResultsCachePolicy results_cache_policy;
  public ExecuteRequestMetadata metadata;
  public static final int SKIP_CACHE_LOOKUP = 1;
  public static final int ACTION_DIGEST = 2;
  public static final int EXECUTION_POLICY = 3;
  public static final int RESULTS_CACHE_POLICY = 4;
  public static final int METADATA = 5;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SKIP_CACHE_LOOKUP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SKIP_CACHE_LOOKUP, new FieldMetaData("skip_cache_lookup", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(ACTION_DIGEST, new FieldMetaData("action_digest", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Digest.class)));
    tmpMetaDataMap.put(EXECUTION_POLICY, new FieldMetaData("execution_policy", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ExecutionPolicy.class)));
    tmpMetaDataMap.put(RESULTS_CACHE_POLICY, new FieldMetaData("results_cache_policy", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ResultsCachePolicy.class)));
    tmpMetaDataMap.put(METADATA, new FieldMetaData("metadata", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ExecuteRequestMetadata.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ExecuteRequest.class, metaDataMap);
  }

  public ExecuteRequest() {
  }

  public ExecuteRequest(
    boolean skip_cache_lookup,
    com.facebook.remoteexecution.cas.Digest action_digest)
  {
    this();
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    this.action_digest = action_digest;
  }

  public ExecuteRequest(
    boolean skip_cache_lookup,
    com.facebook.remoteexecution.cas.Digest action_digest,
    ExecutionPolicy execution_policy,
    ResultsCachePolicy results_cache_policy,
    ExecuteRequestMetadata metadata)
  {
    this();
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    this.action_digest = action_digest;
    this.execution_policy = execution_policy;
    this.results_cache_policy = results_cache_policy;
    this.metadata = metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteRequest(ExecuteRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.skip_cache_lookup = TBaseHelper.deepCopy(other.skip_cache_lookup);
    if (other.isSetAction_digest()) {
      this.action_digest = TBaseHelper.deepCopy(other.action_digest);
    }
    if (other.isSetExecution_policy()) {
      this.execution_policy = TBaseHelper.deepCopy(other.execution_policy);
    }
    if (other.isSetResults_cache_policy()) {
      this.results_cache_policy = TBaseHelper.deepCopy(other.results_cache_policy);
    }
    if (other.isSetMetadata()) {
      this.metadata = TBaseHelper.deepCopy(other.metadata);
    }
  }

  public ExecuteRequest deepCopy() {
    return new ExecuteRequest(this);
  }

  @Deprecated
  public ExecuteRequest clone() {
    return new ExecuteRequest(this);
  }

  public boolean  isSkip_cache_lookup() {
    return this.skip_cache_lookup;
  }

  public ExecuteRequest setSkip_cache_lookup(boolean skip_cache_lookup) {
    this.skip_cache_lookup = skip_cache_lookup;
    setSkip_cache_lookupIsSet(true);
    return this;
  }

  public void unsetSkip_cache_lookup() {
    __isset_bit_vector.clear(__SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  // Returns true if field skip_cache_lookup is set (has been assigned a value) and false otherwise
  public boolean isSetSkip_cache_lookup() {
    return __isset_bit_vector.get(__SKIP_CACHE_LOOKUP_ISSET_ID);
  }

  public void setSkip_cache_lookupIsSet(boolean value) {
    __isset_bit_vector.set(__SKIP_CACHE_LOOKUP_ISSET_ID, value);
  }

  public com.facebook.remoteexecution.cas.Digest  getAction_digest() {
    return this.action_digest;
  }

  public ExecuteRequest setAction_digest(com.facebook.remoteexecution.cas.Digest action_digest) {
    this.action_digest = action_digest;
    return this;
  }

  public void unsetAction_digest() {
    this.action_digest = null;
  }

  // Returns true if field action_digest is set (has been assigned a value) and false otherwise
  public boolean isSetAction_digest() {
    return this.action_digest != null;
  }

  public void setAction_digestIsSet(boolean value) {
    if (!value) {
      this.action_digest = null;
    }
  }

  public ExecutionPolicy  getExecution_policy() {
    return this.execution_policy;
  }

  public ExecuteRequest setExecution_policy(ExecutionPolicy execution_policy) {
    this.execution_policy = execution_policy;
    return this;
  }

  public void unsetExecution_policy() {
    this.execution_policy = null;
  }

  // Returns true if field execution_policy is set (has been assigned a value) and false otherwise
  public boolean isSetExecution_policy() {
    return this.execution_policy != null;
  }

  public void setExecution_policyIsSet(boolean value) {
    if (!value) {
      this.execution_policy = null;
    }
  }

  public ResultsCachePolicy  getResults_cache_policy() {
    return this.results_cache_policy;
  }

  public ExecuteRequest setResults_cache_policy(ResultsCachePolicy results_cache_policy) {
    this.results_cache_policy = results_cache_policy;
    return this;
  }

  public void unsetResults_cache_policy() {
    this.results_cache_policy = null;
  }

  // Returns true if field results_cache_policy is set (has been assigned a value) and false otherwise
  public boolean isSetResults_cache_policy() {
    return this.results_cache_policy != null;
  }

  public void setResults_cache_policyIsSet(boolean value) {
    if (!value) {
      this.results_cache_policy = null;
    }
  }

  public ExecuteRequestMetadata  getMetadata() {
    return this.metadata;
  }

  public ExecuteRequest setMetadata(ExecuteRequestMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  // Returns true if field metadata is set (has been assigned a value) and false otherwise
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SKIP_CACHE_LOOKUP:
      if (value == null) {
        unsetSkip_cache_lookup();
      } else {
        setSkip_cache_lookup((Boolean)value);
      }
      break;

    case ACTION_DIGEST:
      if (value == null) {
        unsetAction_digest();
      } else {
        setAction_digest((com.facebook.remoteexecution.cas.Digest)value);
      }
      break;

    case EXECUTION_POLICY:
      if (value == null) {
        unsetExecution_policy();
      } else {
        setExecution_policy((ExecutionPolicy)value);
      }
      break;

    case RESULTS_CACHE_POLICY:
      if (value == null) {
        unsetResults_cache_policy();
      } else {
        setResults_cache_policy((ResultsCachePolicy)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((ExecuteRequestMetadata)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SKIP_CACHE_LOOKUP:
      return new Boolean(isSkip_cache_lookup());

    case ACTION_DIGEST:
      return getAction_digest();

    case EXECUTION_POLICY:
      return getExecution_policy();

    case RESULTS_CACHE_POLICY:
      return getResults_cache_policy();

    case METADATA:
      return getMetadata();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SKIP_CACHE_LOOKUP:
      return isSetSkip_cache_lookup();
    case ACTION_DIGEST:
      return isSetAction_digest();
    case EXECUTION_POLICY:
      return isSetExecution_policy();
    case RESULTS_CACHE_POLICY:
      return isSetResults_cache_policy();
    case METADATA:
      return isSetMetadata();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteRequest)
      return this.equals((ExecuteRequest)that);
    return false;
  }

  public boolean equals(ExecuteRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_skip_cache_lookup = true;
    boolean that_present_skip_cache_lookup = true;
    if (this_present_skip_cache_lookup || that_present_skip_cache_lookup) {
      if (!(this_present_skip_cache_lookup && that_present_skip_cache_lookup))
        return false;
      if (!TBaseHelper.equalsNobinary(this.skip_cache_lookup, that.skip_cache_lookup))
        return false;
    }

    boolean this_present_action_digest = true && this.isSetAction_digest();
    boolean that_present_action_digest = true && that.isSetAction_digest();
    if (this_present_action_digest || that_present_action_digest) {
      if (!(this_present_action_digest && that_present_action_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.action_digest, that.action_digest))
        return false;
    }

    boolean this_present_execution_policy = true && this.isSetExecution_policy();
    boolean that_present_execution_policy = true && that.isSetExecution_policy();
    if (this_present_execution_policy || that_present_execution_policy) {
      if (!(this_present_execution_policy && that_present_execution_policy))
        return false;
      if (!TBaseHelper.equalsNobinary(this.execution_policy, that.execution_policy))
        return false;
    }

    boolean this_present_results_cache_policy = true && this.isSetResults_cache_policy();
    boolean that_present_results_cache_policy = true && that.isSetResults_cache_policy();
    if (this_present_results_cache_policy || that_present_results_cache_policy) {
      if (!(this_present_results_cache_policy && that_present_results_cache_policy))
        return false;
      if (!TBaseHelper.equalsNobinary(this.results_cache_policy, that.results_cache_policy))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!TBaseHelper.equalsNobinary(this.metadata, that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExecuteRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSkip_cache_lookup()).compareTo(other.isSetSkip_cache_lookup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(skip_cache_lookup, other.skip_cache_lookup);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAction_digest()).compareTo(other.isSetAction_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(action_digest, other.action_digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExecution_policy()).compareTo(other.isSetExecution_policy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(execution_policy, other.execution_policy);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetResults_cache_policy()).compareTo(other.isSetResults_cache_policy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(results_cache_policy, other.results_cache_policy);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(metadata, other.metadata);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SKIP_CACHE_LOOKUP:
          if (field.type == TType.BOOL) {
            this.skip_cache_lookup = iprot.readBool();
            setSkip_cache_lookupIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACTION_DIGEST:
          if (field.type == TType.STRUCT) {
            this.action_digest = new com.facebook.remoteexecution.cas.Digest();
            this.action_digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_POLICY:
          if (field.type == TType.STRUCT) {
            this.execution_policy = new ExecutionPolicy();
            this.execution_policy.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESULTS_CACHE_POLICY:
          if (field.type == TType.STRUCT) {
            this.results_cache_policy = new ResultsCachePolicy();
            this.results_cache_policy.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METADATA:
          if (field.type == TType.STRUCT) {
            this.metadata = new ExecuteRequestMetadata();
            this.metadata.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SKIP_CACHE_LOOKUP_FIELD_DESC);
    oprot.writeBool(this.skip_cache_lookup);
    oprot.writeFieldEnd();
    if (this.action_digest != null) {
      oprot.writeFieldBegin(ACTION_DIGEST_FIELD_DESC);
      this.action_digest.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.execution_policy != null) {
      if (isSetExecution_policy()) {
        oprot.writeFieldBegin(EXECUTION_POLICY_FIELD_DESC);
        this.execution_policy.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.results_cache_policy != null) {
      if (isSetResults_cache_policy()) {
        oprot.writeFieldBegin(RESULTS_CACHE_POLICY_FIELD_DESC);
        this.results_cache_policy.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.metadata != null) {
      if (isSetMetadata()) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        this.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ExecuteRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("skip_cache_lookup");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isSkip_cache_lookup(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("action_digest");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAction_digest() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getAction_digest(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetExecution_policy())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("execution_policy");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getExecution_policy() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getExecution_policy(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetResults_cache_policy())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("results_cache_policy");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getResults_cache_policy() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getResults_cache_policy(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetMetadata())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("metadata");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getMetadata() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getMetadata(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

