/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class LogFile implements TBase, java.io.Serializable, Cloneable, Comparable<LogFile> {
  private static final TStruct STRUCT_DESC = new TStruct("LogFile");
  private static final TField DIGEST_FIELD_DESC = new TField("digest", TType.STRUCT, (short)1);
  private static final TField HUMAN_READABLE_FIELD_DESC = new TField("human_readable", TType.BOOL, (short)2);

  public com.facebook.remoteexecution.cas.Digest digest;
  public boolean human_readable;
  public static final int DIGEST = 1;
  public static final int HUMAN_READABLE = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __HUMAN_READABLE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(DIGEST, new FieldMetaData("digest", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Digest.class)));
    tmpMetaDataMap.put(HUMAN_READABLE, new FieldMetaData("human_readable", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(LogFile.class, metaDataMap);
  }

  public LogFile() {
  }

  public LogFile(
    com.facebook.remoteexecution.cas.Digest digest,
    boolean human_readable)
  {
    this();
    this.digest = digest;
    this.human_readable = human_readable;
    setHuman_readableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogFile(LogFile other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDigest()) {
      this.digest = TBaseHelper.deepCopy(other.digest);
    }
    this.human_readable = TBaseHelper.deepCopy(other.human_readable);
  }

  public LogFile deepCopy() {
    return new LogFile(this);
  }

  @Deprecated
  public LogFile clone() {
    return new LogFile(this);
  }

  public com.facebook.remoteexecution.cas.Digest  getDigest() {
    return this.digest;
  }

  public LogFile setDigest(com.facebook.remoteexecution.cas.Digest digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  // Returns true if field digest is set (has been assigned a value) and false otherwise
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public boolean  isHuman_readable() {
    return this.human_readable;
  }

  public LogFile setHuman_readable(boolean human_readable) {
    this.human_readable = human_readable;
    setHuman_readableIsSet(true);
    return this;
  }

  public void unsetHuman_readable() {
    __isset_bit_vector.clear(__HUMAN_READABLE_ISSET_ID);
  }

  // Returns true if field human_readable is set (has been assigned a value) and false otherwise
  public boolean isSetHuman_readable() {
    return __isset_bit_vector.get(__HUMAN_READABLE_ISSET_ID);
  }

  public void setHuman_readableIsSet(boolean value) {
    __isset_bit_vector.set(__HUMAN_READABLE_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((com.facebook.remoteexecution.cas.Digest)value);
      }
      break;

    case HUMAN_READABLE:
      if (value == null) {
        unsetHuman_readable();
      } else {
        setHuman_readable((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case DIGEST:
      return getDigest();

    case HUMAN_READABLE:
      return new Boolean(isHuman_readable());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case DIGEST:
      return isSetDigest();
    case HUMAN_READABLE:
      return isSetHuman_readable();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogFile)
      return this.equals((LogFile)that);
    return false;
  }

  public boolean equals(LogFile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.digest, that.digest))
        return false;
    }

    boolean this_present_human_readable = true;
    boolean that_present_human_readable = true;
    if (this_present_human_readable || that_present_human_readable) {
      if (!(this_present_human_readable && that_present_human_readable))
        return false;
      if (!TBaseHelper.equalsNobinary(this.human_readable, that.human_readable))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LogFile other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(digest, other.digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHuman_readable()).compareTo(other.isSetHuman_readable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(human_readable, other.human_readable);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case DIGEST:
          if (field.type == TType.STRUCT) {
            this.digest = new com.facebook.remoteexecution.cas.Digest();
            this.digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HUMAN_READABLE:
          if (field.type == TType.BOOL) {
            this.human_readable = iprot.readBool();
            setHuman_readableIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.digest != null) {
      oprot.writeFieldBegin(DIGEST_FIELD_DESC);
      this.digest.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HUMAN_READABLE_FIELD_DESC);
    oprot.writeBool(this.human_readable);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("LogFile");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("digest");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDigest() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDigest(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("human_readable");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isHuman_readable(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

