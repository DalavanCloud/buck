/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Command implements TBase, java.io.Serializable, Cloneable, Comparable<Command> {
  private static final TStruct STRUCT_DESC = new TStruct("Command");
  private static final TField ARGUMENTS_FIELD_DESC = new TField("arguments", TType.LIST, (short)1);
  private static final TField ENVIRONMENT_VARIABLES_FIELD_DESC = new TField("environment_variables", TType.LIST, (short)2);

  public List<String> arguments;
  public List<EnvironmentVariable> environment_variables;
  public static final int ARGUMENTS = 1;
  public static final int ENVIRONMENT_VARIABLES = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ARGUMENTS, new FieldMetaData("arguments", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(ENVIRONMENT_VARIABLES, new FieldMetaData("environment_variables", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, EnvironmentVariable.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Command.class, metaDataMap);
  }

  public Command() {
  }

  public Command(
    List<String> arguments,
    List<EnvironmentVariable> environment_variables)
  {
    this();
    this.arguments = arguments;
    this.environment_variables = environment_variables;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Command(Command other) {
    if (other.isSetArguments()) {
      this.arguments = TBaseHelper.deepCopy(other.arguments);
    }
    if (other.isSetEnvironment_variables()) {
      this.environment_variables = TBaseHelper.deepCopy(other.environment_variables);
    }
  }

  public Command deepCopy() {
    return new Command(this);
  }

  @Deprecated
  public Command clone() {
    return new Command(this);
  }

  public List<String>  getArguments() {
    return this.arguments;
  }

  public Command setArguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  // Returns true if field arguments is set (has been assigned a value) and false otherwise
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  public List<EnvironmentVariable>  getEnvironment_variables() {
    return this.environment_variables;
  }

  public Command setEnvironment_variables(List<EnvironmentVariable> environment_variables) {
    this.environment_variables = environment_variables;
    return this;
  }

  public void unsetEnvironment_variables() {
    this.environment_variables = null;
  }

  // Returns true if field environment_variables is set (has been assigned a value) and false otherwise
  public boolean isSetEnvironment_variables() {
    return this.environment_variables != null;
  }

  public void setEnvironment_variablesIsSet(boolean value) {
    if (!value) {
      this.environment_variables = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ARGUMENTS:
      if (value == null) {
        unsetArguments();
      } else {
        setArguments((List<String>)value);
      }
      break;

    case ENVIRONMENT_VARIABLES:
      if (value == null) {
        unsetEnvironment_variables();
      } else {
        setEnvironment_variables((List<EnvironmentVariable>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ARGUMENTS:
      return getArguments();

    case ENVIRONMENT_VARIABLES:
      return getEnvironment_variables();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ARGUMENTS:
      return isSetArguments();
    case ENVIRONMENT_VARIABLES:
      return isSetEnvironment_variables();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Command)
      return this.equals((Command)that);
    return false;
  }

  public boolean equals(Command that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments))
        return false;
      if (!TBaseHelper.equalsNobinary(this.arguments, that.arguments))
        return false;
    }

    boolean this_present_environment_variables = true && this.isSetEnvironment_variables();
    boolean that_present_environment_variables = true && that.isSetEnvironment_variables();
    if (this_present_environment_variables || that_present_environment_variables) {
      if (!(this_present_environment_variables && that_present_environment_variables))
        return false;
      if (!TBaseHelper.equalsNobinary(this.environment_variables, that.environment_variables))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Command other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(arguments, other.arguments);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEnvironment_variables()).compareTo(other.isSetEnvironment_variables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(environment_variables, other.environment_variables);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ARGUMENTS:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.arguments = new ArrayList<String>(Math.max(0, _list32.size));
              for (int _i33 = 0; 
                   (_list32.size < 0) ? iprot.peekList() : (_i33 < _list32.size); 
                   ++_i33)
              {
                String _elem34;
                _elem34 = iprot.readString();
                this.arguments.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENVIRONMENT_VARIABLES:
          if (field.type == TType.LIST) {
            {
              TList _list35 = iprot.readListBegin();
              this.environment_variables = new ArrayList<EnvironmentVariable>(Math.max(0, _list35.size));
              for (int _i36 = 0; 
                   (_list35.size < 0) ? iprot.peekList() : (_i36 < _list35.size); 
                   ++_i36)
              {
                EnvironmentVariable _elem37;
                _elem37 = new EnvironmentVariable();
                _elem37.read(iprot);
                this.environment_variables.add(_elem37);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.arguments != null) {
      oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.arguments.size()));
        for (String _iter38 : this.arguments)        {
          oprot.writeString(_iter38);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.environment_variables != null) {
      oprot.writeFieldBegin(ENVIRONMENT_VARIABLES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.environment_variables.size()));
        for (EnvironmentVariable _iter39 : this.environment_variables)        {
          _iter39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Command");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("arguments");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getArguments() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getArguments(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("environment_variables");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEnvironment_variables() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEnvironment_variables(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

