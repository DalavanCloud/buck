/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Tree implements TBase, java.io.Serializable, Cloneable, Comparable<Tree> {
  private static final TStruct STRUCT_DESC = new TStruct("Tree");
  private static final TField ROOT_FIELD_DESC = new TField("root", TType.STRUCT, (short)1);
  private static final TField CHILDREN_FIELD_DESC = new TField("children", TType.LIST, (short)2);

  public com.facebook.remoteexecution.cas.Directory root;
  public List<com.facebook.remoteexecution.cas.Directory> children;
  public static final int ROOT = 1;
  public static final int CHILDREN = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ROOT, new FieldMetaData("root", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Directory.class)));
    tmpMetaDataMap.put(CHILDREN, new FieldMetaData("children", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Directory.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Tree.class, metaDataMap);
  }

  public Tree() {
  }

  public Tree(
    com.facebook.remoteexecution.cas.Directory root,
    List<com.facebook.remoteexecution.cas.Directory> children)
  {
    this();
    this.root = root;
    this.children = children;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tree(Tree other) {
    if (other.isSetRoot()) {
      this.root = TBaseHelper.deepCopy(other.root);
    }
    if (other.isSetChildren()) {
      this.children = TBaseHelper.deepCopy(other.children);
    }
  }

  public Tree deepCopy() {
    return new Tree(this);
  }

  @Deprecated
  public Tree clone() {
    return new Tree(this);
  }

  public com.facebook.remoteexecution.cas.Directory  getRoot() {
    return this.root;
  }

  public Tree setRoot(com.facebook.remoteexecution.cas.Directory root) {
    this.root = root;
    return this;
  }

  public void unsetRoot() {
    this.root = null;
  }

  // Returns true if field root is set (has been assigned a value) and false otherwise
  public boolean isSetRoot() {
    return this.root != null;
  }

  public void setRootIsSet(boolean value) {
    if (!value) {
      this.root = null;
    }
  }

  public List<com.facebook.remoteexecution.cas.Directory>  getChildren() {
    return this.children;
  }

  public Tree setChildren(List<com.facebook.remoteexecution.cas.Directory> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  // Returns true if field children is set (has been assigned a value) and false otherwise
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ROOT:
      if (value == null) {
        unsetRoot();
      } else {
        setRoot((com.facebook.remoteexecution.cas.Directory)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((List<com.facebook.remoteexecution.cas.Directory>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROOT:
      return getRoot();

    case CHILDREN:
      return getChildren();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ROOT:
      return isSetRoot();
    case CHILDREN:
      return isSetChildren();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tree)
      return this.equals((Tree)that);
    return false;
  }

  public boolean equals(Tree that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_root = true && this.isSetRoot();
    boolean that_present_root = true && that.isSetRoot();
    if (this_present_root || that_present_root) {
      if (!(this_present_root && that_present_root))
        return false;
      if (!TBaseHelper.equalsNobinary(this.root, that.root))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!TBaseHelper.equalsNobinary(this.children, that.children))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Tree other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoot()).compareTo(other.isSetRoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(root, other.root);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(children, other.children);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ROOT:
          if (field.type == TType.STRUCT) {
            this.root = new com.facebook.remoteexecution.cas.Directory();
            this.root.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHILDREN:
          if (field.type == TType.LIST) {
            {
              TList _list20 = iprot.readListBegin();
              this.children = new ArrayList<com.facebook.remoteexecution.cas.Directory>(Math.max(0, _list20.size));
              for (int _i21 = 0; 
                   (_list20.size < 0) ? iprot.peekList() : (_i21 < _list20.size); 
                   ++_i21)
              {
                com.facebook.remoteexecution.cas.Directory _elem22;
                _elem22 = new com.facebook.remoteexecution.cas.Directory();
                _elem22.read(iprot);
                this.children.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.root != null) {
      oprot.writeFieldBegin(ROOT_FIELD_DESC);
      this.root.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.children != null) {
      oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.children.size()));
        for (com.facebook.remoteexecution.cas.Directory _iter23 : this.children)        {
          _iter23.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Tree");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("root");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRoot() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getRoot(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("children");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getChildren() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getChildren(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

