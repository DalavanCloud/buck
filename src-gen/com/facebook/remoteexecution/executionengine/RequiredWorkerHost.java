/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RequiredWorkerHost implements TBase, java.io.Serializable, Cloneable, Comparable<RequiredWorkerHost> {
  private static final TStruct STRUCT_DESC = new TStruct("RequiredWorkerHost");
  private static final TField PROPERTIES_FIELD_DESC = new TField("properties", TType.LIST, (short)1);
  private static final TField RESOURCES_FIELD_DESC = new TField("resources", TType.LIST, (short)2);
  private static final TField DEVICES_FIELD_DESC = new TField("devices", TType.LIST, (short)3);

  public List<Property> properties;
  public List<Resource> resources;
  public List<RequiredDevice> devices;
  public static final int PROPERTIES = 1;
  public static final int RESOURCES = 2;
  public static final int DEVICES = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PROPERTIES, new FieldMetaData("properties", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Property.class))));
    tmpMetaDataMap.put(RESOURCES, new FieldMetaData("resources", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Resource.class))));
    tmpMetaDataMap.put(DEVICES, new FieldMetaData("devices", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, RequiredDevice.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(RequiredWorkerHost.class, metaDataMap);
  }

  public RequiredWorkerHost() {
  }

  public RequiredWorkerHost(
    List<Property> properties,
    List<Resource> resources,
    List<RequiredDevice> devices)
  {
    this();
    this.properties = properties;
    this.resources = resources;
    this.devices = devices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequiredWorkerHost(RequiredWorkerHost other) {
    if (other.isSetProperties()) {
      this.properties = TBaseHelper.deepCopy(other.properties);
    }
    if (other.isSetResources()) {
      this.resources = TBaseHelper.deepCopy(other.resources);
    }
    if (other.isSetDevices()) {
      this.devices = TBaseHelper.deepCopy(other.devices);
    }
  }

  public RequiredWorkerHost deepCopy() {
    return new RequiredWorkerHost(this);
  }

  @Deprecated
  public RequiredWorkerHost clone() {
    return new RequiredWorkerHost(this);
  }

  public List<Property>  getProperties() {
    return this.properties;
  }

  public RequiredWorkerHost setProperties(List<Property> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  // Returns true if field properties is set (has been assigned a value) and false otherwise
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public List<Resource>  getResources() {
    return this.resources;
  }

  public RequiredWorkerHost setResources(List<Resource> resources) {
    this.resources = resources;
    return this;
  }

  public void unsetResources() {
    this.resources = null;
  }

  // Returns true if field resources is set (has been assigned a value) and false otherwise
  public boolean isSetResources() {
    return this.resources != null;
  }

  public void setResourcesIsSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public List<RequiredDevice>  getDevices() {
    return this.devices;
  }

  public RequiredWorkerHost setDevices(List<RequiredDevice> devices) {
    this.devices = devices;
    return this;
  }

  public void unsetDevices() {
    this.devices = null;
  }

  // Returns true if field devices is set (has been assigned a value) and false otherwise
  public boolean isSetDevices() {
    return this.devices != null;
  }

  public void setDevicesIsSet(boolean value) {
    if (!value) {
      this.devices = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((List<Property>)value);
      }
      break;

    case RESOURCES:
      if (value == null) {
        unsetResources();
      } else {
        setResources((List<Resource>)value);
      }
      break;

    case DEVICES:
      if (value == null) {
        unsetDevices();
      } else {
        setDevices((List<RequiredDevice>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PROPERTIES:
      return getProperties();

    case RESOURCES:
      return getResources();

    case DEVICES:
      return getDevices();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PROPERTIES:
      return isSetProperties();
    case RESOURCES:
      return isSetResources();
    case DEVICES:
      return isSetDevices();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequiredWorkerHost)
      return this.equals((RequiredWorkerHost)that);
    return false;
  }

  public boolean equals(RequiredWorkerHost that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!TBaseHelper.equalsNobinary(this.properties, that.properties))
        return false;
    }

    boolean this_present_resources = true && this.isSetResources();
    boolean that_present_resources = true && that.isSetResources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!TBaseHelper.equalsNobinary(this.resources, that.resources))
        return false;
    }

    boolean this_present_devices = true && this.isSetDevices();
    boolean that_present_devices = true && that.isSetDevices();
    if (this_present_devices || that_present_devices) {
      if (!(this_present_devices && that_present_devices))
        return false;
      if (!TBaseHelper.equalsNobinary(this.devices, that.devices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RequiredWorkerHost other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(properties, other.properties);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(resources, other.resources);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDevices()).compareTo(other.isSetDevices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(devices, other.devices);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PROPERTIES:
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.properties = new ArrayList<Property>(Math.max(0, _list16.size));
              for (int _i17 = 0; 
                   (_list16.size < 0) ? iprot.peekList() : (_i17 < _list16.size); 
                   ++_i17)
              {
                Property _elem18;
                _elem18 = new Property();
                _elem18.read(iprot);
                this.properties.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESOURCES:
          if (field.type == TType.LIST) {
            {
              TList _list19 = iprot.readListBegin();
              this.resources = new ArrayList<Resource>(Math.max(0, _list19.size));
              for (int _i20 = 0; 
                   (_list19.size < 0) ? iprot.peekList() : (_i20 < _list19.size); 
                   ++_i20)
              {
                Resource _elem21;
                _elem21 = new Resource();
                _elem21.read(iprot);
                this.resources.add(_elem21);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEVICES:
          if (field.type == TType.LIST) {
            {
              TList _list22 = iprot.readListBegin();
              this.devices = new ArrayList<RequiredDevice>(Math.max(0, _list22.size));
              for (int _i23 = 0; 
                   (_list22.size < 0) ? iprot.peekList() : (_i23 < _list22.size); 
                   ++_i23)
              {
                RequiredDevice _elem24;
                _elem24 = new RequiredDevice();
                _elem24.read(iprot);
                this.devices.add(_elem24);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.properties != null) {
      oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.properties.size()));
        for (Property _iter25 : this.properties)        {
          _iter25.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.resources != null) {
      oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.resources.size()));
        for (Resource _iter26 : this.resources)        {
          _iter26.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.devices != null) {
      oprot.writeFieldBegin(DEVICES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.devices.size()));
        for (RequiredDevice _iter27 : this.devices)        {
          _iter27.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("RequiredWorkerHost");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("properties");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getProperties() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getProperties(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("resources");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getResources() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getResources(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("devices");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDevices() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDevices(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

