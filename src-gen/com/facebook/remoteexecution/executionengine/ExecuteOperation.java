/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ExecuteOperation implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ExecuteOperation");
  private static final TField EXECUTION_ID_FIELD_DESC = new TField("execution_id", TType.STRING, (short)1);
  private static final TField METADATA_FIELD_DESC = new TField("metadata", TType.STRUCT, (short)2);
  private static final TField DONE_FIELD_DESC = new TField("done", TType.BOOL, (short)3);
  private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)4);
  private static final TField RESPONSE_FIELD_DESC = new TField("response", TType.STRUCT, (short)5);
  private static final TField STATUS_HTTP_ENDPOINT_FIELD_DESC = new TField("status_http_endpoint", TType.STRING, (short)6);

  public String execution_id;
  public ExecuteOperationMetadata metadata;
  public boolean done;
  public ExecutionEngineException ex;
  public ExecuteResponse response;
  public String status_http_endpoint;
  public static final int EXECUTION_ID = 1;
  public static final int METADATA = 2;
  public static final int DONE = 3;
  public static final int EX = 4;
  public static final int RESPONSE = 5;
  public static final int STATUS_HTTP_ENDPOINT = 6;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __DONE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(EXECUTION_ID, new FieldMetaData("execution_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(METADATA, new FieldMetaData("metadata", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ExecuteOperationMetadata.class)));
    tmpMetaDataMap.put(DONE, new FieldMetaData("done", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRUCT)));
    tmpMetaDataMap.put(RESPONSE, new FieldMetaData("response", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ExecuteResponse.class)));
    tmpMetaDataMap.put(STATUS_HTTP_ENDPOINT, new FieldMetaData("status_http_endpoint", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ExecuteOperation.class, metaDataMap);
  }

  public ExecuteOperation() {
  }

  public ExecuteOperation(
    String execution_id,
    ExecuteOperationMetadata metadata,
    boolean done)
  {
    this();
    this.execution_id = execution_id;
    this.metadata = metadata;
    this.done = done;
    setDoneIsSet(true);
  }

  public ExecuteOperation(
    String execution_id,
    ExecuteOperationMetadata metadata,
    boolean done,
    ExecutionEngineException ex,
    ExecuteResponse response,
    String status_http_endpoint)
  {
    this();
    this.execution_id = execution_id;
    this.metadata = metadata;
    this.done = done;
    setDoneIsSet(true);
    this.ex = ex;
    this.response = response;
    this.status_http_endpoint = status_http_endpoint;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecuteOperation(ExecuteOperation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetExecution_id()) {
      this.execution_id = TBaseHelper.deepCopy(other.execution_id);
    }
    if (other.isSetMetadata()) {
      this.metadata = TBaseHelper.deepCopy(other.metadata);
    }
    this.done = TBaseHelper.deepCopy(other.done);
    if (other.isSetEx()) {
      this.ex = TBaseHelper.deepCopy(other.ex);
    }
    if (other.isSetResponse()) {
      this.response = TBaseHelper.deepCopy(other.response);
    }
    if (other.isSetStatus_http_endpoint()) {
      this.status_http_endpoint = TBaseHelper.deepCopy(other.status_http_endpoint);
    }
  }

  public ExecuteOperation deepCopy() {
    return new ExecuteOperation(this);
  }

  @Deprecated
  public ExecuteOperation clone() {
    return new ExecuteOperation(this);
  }

  public String  getExecution_id() {
    return this.execution_id;
  }

  public ExecuteOperation setExecution_id(String execution_id) {
    this.execution_id = execution_id;
    return this;
  }

  public void unsetExecution_id() {
    this.execution_id = null;
  }

  // Returns true if field execution_id is set (has been assigned a value) and false otherwise
  public boolean isSetExecution_id() {
    return this.execution_id != null;
  }

  public void setExecution_idIsSet(boolean value) {
    if (!value) {
      this.execution_id = null;
    }
  }

  public ExecuteOperationMetadata  getMetadata() {
    return this.metadata;
  }

  public ExecuteOperation setMetadata(ExecuteOperationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  // Returns true if field metadata is set (has been assigned a value) and false otherwise
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public boolean  isDone() {
    return this.done;
  }

  public ExecuteOperation setDone(boolean done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bit_vector.clear(__DONE_ISSET_ID);
  }

  // Returns true if field done is set (has been assigned a value) and false otherwise
  public boolean isSetDone() {
    return __isset_bit_vector.get(__DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bit_vector.set(__DONE_ISSET_ID, value);
  }

  public ExecutionEngineException  getEx() {
    return this.ex;
  }

  public ExecuteOperation setEx(ExecutionEngineException ex) {
    this.ex = ex;
    return this;
  }

  public void unsetEx() {
    this.ex = null;
  }

  // Returns true if field ex is set (has been assigned a value) and false otherwise
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  public ExecuteResponse  getResponse() {
    return this.response;
  }

  public ExecuteOperation setResponse(ExecuteResponse response) {
    this.response = response;
    return this;
  }

  public void unsetResponse() {
    this.response = null;
  }

  // Returns true if field response is set (has been assigned a value) and false otherwise
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  public String  getStatus_http_endpoint() {
    return this.status_http_endpoint;
  }

  public ExecuteOperation setStatus_http_endpoint(String status_http_endpoint) {
    this.status_http_endpoint = status_http_endpoint;
    return this;
  }

  public void unsetStatus_http_endpoint() {
    this.status_http_endpoint = null;
  }

  // Returns true if field status_http_endpoint is set (has been assigned a value) and false otherwise
  public boolean isSetStatus_http_endpoint() {
    return this.status_http_endpoint != null;
  }

  public void setStatus_http_endpointIsSet(boolean value) {
    if (!value) {
      this.status_http_endpoint = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case EXECUTION_ID:
      if (value == null) {
        unsetExecution_id();
      } else {
        setExecution_id((String)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((ExecuteOperationMetadata)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((ExecutionEngineException)value);
      }
      break;

    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((ExecuteResponse)value);
      }
      break;

    case STATUS_HTTP_ENDPOINT:
      if (value == null) {
        unsetStatus_http_endpoint();
      } else {
        setStatus_http_endpoint((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case EXECUTION_ID:
      return getExecution_id();

    case METADATA:
      return getMetadata();

    case DONE:
      return new Boolean(isDone());

    case EX:
      return getEx();

    case RESPONSE:
      return getResponse();

    case STATUS_HTTP_ENDPOINT:
      return getStatus_http_endpoint();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case EXECUTION_ID:
      return isSetExecution_id();
    case METADATA:
      return isSetMetadata();
    case DONE:
      return isSetDone();
    case EX:
      return isSetEx();
    case RESPONSE:
      return isSetResponse();
    case STATUS_HTTP_ENDPOINT:
      return isSetStatus_http_endpoint();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecuteOperation)
      return this.equals((ExecuteOperation)that);
    return false;
  }

  public boolean equals(ExecuteOperation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_execution_id = true && this.isSetExecution_id();
    boolean that_present_execution_id = true && that.isSetExecution_id();
    if (this_present_execution_id || that_present_execution_id) {
      if (!(this_present_execution_id && that_present_execution_id))
        return false;
      if (!TBaseHelper.equalsNobinary(this.execution_id, that.execution_id))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!TBaseHelper.equalsNobinary(this.metadata, that.metadata))
        return false;
    }

    boolean this_present_done = true;
    boolean that_present_done = true;
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (!TBaseHelper.equalsNobinary(this.done, that.done))
        return false;
    }

    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
        return false;
    }

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!TBaseHelper.equalsNobinary(this.response, that.response))
        return false;
    }

    boolean this_present_status_http_endpoint = true && this.isSetStatus_http_endpoint();
    boolean that_present_status_http_endpoint = true && that.isSetStatus_http_endpoint();
    if (this_present_status_http_endpoint || that_present_status_http_endpoint) {
      if (!(this_present_status_http_endpoint && that_present_status_http_endpoint))
        return false;
      if (!TBaseHelper.equalsNobinary(this.status_http_endpoint, that.status_http_endpoint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case EXECUTION_ID:
          if (field.type == TType.STRING) {
            this.execution_id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METADATA:
          if (field.type == TType.STRUCT) {
            this.metadata = new ExecuteOperationMetadata();
            this.metadata.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DONE:
          if (field.type == TType.BOOL) {
            this.done = iprot.readBool();
            setDoneIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EX:
          if (field.type == TType.STRUCT) {
            this.ex = new ExecutionEngineException();
            this.ex.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESPONSE:
          if (field.type == TType.STRUCT) {
            this.response = new ExecuteResponse();
            this.response.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS_HTTP_ENDPOINT:
          if (field.type == TType.STRING) {
            this.status_http_endpoint = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.execution_id != null) {
      oprot.writeFieldBegin(EXECUTION_ID_FIELD_DESC);
      oprot.writeString(this.execution_id);
      oprot.writeFieldEnd();
    }
    if (this.metadata != null) {
      oprot.writeFieldBegin(METADATA_FIELD_DESC);
      this.metadata.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DONE_FIELD_DESC);
    oprot.writeBool(this.done);
    oprot.writeFieldEnd();
    if (this.ex != null) {
      if (isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.response != null) {
      if (isSetResponse()) {
        oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
        this.response.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.status_http_endpoint != null) {
      if (isSetStatus_http_endpoint()) {
        oprot.writeFieldBegin(STATUS_HTTP_ENDPOINT_FIELD_DESC);
        oprot.writeString(this.status_http_endpoint);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ExecuteOperation");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("execution_id");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getExecution_id() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getExecution_id(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("metadata");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getMetadata() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getMetadata(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("done");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isDone(), indent + 1, prettyPrint));
    first = false;
    if (isSetEx())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetResponse())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("response");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getResponse() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getResponse(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetStatus_http_endpoint())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("status_http_endpoint");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStatus_http_endpoint() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStatus_http_endpoint(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

