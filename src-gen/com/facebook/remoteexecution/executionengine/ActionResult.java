/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.executionengine;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ActionResult implements TBase, java.io.Serializable, Cloneable, Comparable<ActionResult> {
  private static final TStruct STRUCT_DESC = new TStruct("ActionResult");
  private static final TField OUTPUT_FILES_FIELD_DESC = new TField("output_files", TType.LIST, (short)1);
  private static final TField OUTPUT_DIRECTORIES_FIELD_DESC = new TField("output_directories", TType.LIST, (short)2);
  private static final TField EXIT_CODE_FIELD_DESC = new TField("exit_code", TType.I32, (short)3);
  private static final TField STDOUT_RAW_FIELD_DESC = new TField("stdout_raw", TType.STRING, (short)4);
  private static final TField STDOUT_DIGEST_FIELD_DESC = new TField("stdout_digest", TType.STRUCT, (short)5);
  private static final TField STDERR_RAW_FIELD_DESC = new TField("stderr_raw", TType.STRING, (short)6);
  private static final TField STDERR_DIGEST_FIELD_DESC = new TField("stderr_digest", TType.STRUCT, (short)7);
  private static final TField EXECUTION_METADATA_FIELD_DESC = new TField("execution_metadata", TType.STRUCT, (short)8);

  public List<OutputFile> output_files;
  public List<OutputDirectory> output_directories;
  public int exit_code;
  public byte[] stdout_raw;
  public com.facebook.remoteexecution.cas.Digest stdout_digest;
  public byte[] stderr_raw;
  public com.facebook.remoteexecution.cas.Digest stderr_digest;
  public ExecutedActionMetadata execution_metadata;
  public static final int OUTPUT_FILES = 1;
  public static final int OUTPUT_DIRECTORIES = 2;
  public static final int EXIT_CODE = 3;
  public static final int STDOUT_RAW = 4;
  public static final int STDOUT_DIGEST = 5;
  public static final int STDERR_RAW = 6;
  public static final int STDERR_DIGEST = 7;
  public static final int EXECUTION_METADATA = 8;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __EXIT_CODE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OUTPUT_FILES, new FieldMetaData("output_files", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, OutputFile.class))));
    tmpMetaDataMap.put(OUTPUT_DIRECTORIES, new FieldMetaData("output_directories", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, OutputDirectory.class))));
    tmpMetaDataMap.put(EXIT_CODE, new FieldMetaData("exit_code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(STDOUT_RAW, new FieldMetaData("stdout_raw", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(STDOUT_DIGEST, new FieldMetaData("stdout_digest", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Digest.class)));
    tmpMetaDataMap.put(STDERR_RAW, new FieldMetaData("stderr_raw", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(STDERR_DIGEST, new FieldMetaData("stderr_digest", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, com.facebook.remoteexecution.cas.Digest.class)));
    tmpMetaDataMap.put(EXECUTION_METADATA, new FieldMetaData("execution_metadata", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ExecutedActionMetadata.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ActionResult.class, metaDataMap);
  }

  public ActionResult() {
  }

  public ActionResult(
    List<OutputFile> output_files,
    List<OutputDirectory> output_directories,
    int exit_code,
    ExecutedActionMetadata execution_metadata)
  {
    this();
    this.output_files = output_files;
    this.output_directories = output_directories;
    this.exit_code = exit_code;
    setExit_codeIsSet(true);
    this.execution_metadata = execution_metadata;
  }

  public ActionResult(
    List<OutputFile> output_files,
    List<OutputDirectory> output_directories,
    int exit_code,
    byte[] stdout_raw,
    com.facebook.remoteexecution.cas.Digest stdout_digest,
    byte[] stderr_raw,
    com.facebook.remoteexecution.cas.Digest stderr_digest,
    ExecutedActionMetadata execution_metadata)
  {
    this();
    this.output_files = output_files;
    this.output_directories = output_directories;
    this.exit_code = exit_code;
    setExit_codeIsSet(true);
    this.stdout_raw = stdout_raw;
    this.stdout_digest = stdout_digest;
    this.stderr_raw = stderr_raw;
    this.stderr_digest = stderr_digest;
    this.execution_metadata = execution_metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionResult(ActionResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOutput_files()) {
      this.output_files = TBaseHelper.deepCopy(other.output_files);
    }
    if (other.isSetOutput_directories()) {
      this.output_directories = TBaseHelper.deepCopy(other.output_directories);
    }
    this.exit_code = TBaseHelper.deepCopy(other.exit_code);
    if (other.isSetStdout_raw()) {
      this.stdout_raw = TBaseHelper.deepCopy(other.stdout_raw);
    }
    if (other.isSetStdout_digest()) {
      this.stdout_digest = TBaseHelper.deepCopy(other.stdout_digest);
    }
    if (other.isSetStderr_raw()) {
      this.stderr_raw = TBaseHelper.deepCopy(other.stderr_raw);
    }
    if (other.isSetStderr_digest()) {
      this.stderr_digest = TBaseHelper.deepCopy(other.stderr_digest);
    }
    if (other.isSetExecution_metadata()) {
      this.execution_metadata = TBaseHelper.deepCopy(other.execution_metadata);
    }
  }

  public ActionResult deepCopy() {
    return new ActionResult(this);
  }

  @Deprecated
  public ActionResult clone() {
    return new ActionResult(this);
  }

  public List<OutputFile>  getOutput_files() {
    return this.output_files;
  }

  public ActionResult setOutput_files(List<OutputFile> output_files) {
    this.output_files = output_files;
    return this;
  }

  public void unsetOutput_files() {
    this.output_files = null;
  }

  // Returns true if field output_files is set (has been assigned a value) and false otherwise
  public boolean isSetOutput_files() {
    return this.output_files != null;
  }

  public void setOutput_filesIsSet(boolean value) {
    if (!value) {
      this.output_files = null;
    }
  }

  public List<OutputDirectory>  getOutput_directories() {
    return this.output_directories;
  }

  public ActionResult setOutput_directories(List<OutputDirectory> output_directories) {
    this.output_directories = output_directories;
    return this;
  }

  public void unsetOutput_directories() {
    this.output_directories = null;
  }

  // Returns true if field output_directories is set (has been assigned a value) and false otherwise
  public boolean isSetOutput_directories() {
    return this.output_directories != null;
  }

  public void setOutput_directoriesIsSet(boolean value) {
    if (!value) {
      this.output_directories = null;
    }
  }

  public int  getExit_code() {
    return this.exit_code;
  }

  public ActionResult setExit_code(int exit_code) {
    this.exit_code = exit_code;
    setExit_codeIsSet(true);
    return this;
  }

  public void unsetExit_code() {
    __isset_bit_vector.clear(__EXIT_CODE_ISSET_ID);
  }

  // Returns true if field exit_code is set (has been assigned a value) and false otherwise
  public boolean isSetExit_code() {
    return __isset_bit_vector.get(__EXIT_CODE_ISSET_ID);
  }

  public void setExit_codeIsSet(boolean value) {
    __isset_bit_vector.set(__EXIT_CODE_ISSET_ID, value);
  }

  public byte[]  getStdout_raw() {
    return this.stdout_raw;
  }

  public ActionResult setStdout_raw(byte[] stdout_raw) {
    this.stdout_raw = stdout_raw;
    return this;
  }

  public void unsetStdout_raw() {
    this.stdout_raw = null;
  }

  // Returns true if field stdout_raw is set (has been assigned a value) and false otherwise
  public boolean isSetStdout_raw() {
    return this.stdout_raw != null;
  }

  public void setStdout_rawIsSet(boolean value) {
    if (!value) {
      this.stdout_raw = null;
    }
  }

  public com.facebook.remoteexecution.cas.Digest  getStdout_digest() {
    return this.stdout_digest;
  }

  public ActionResult setStdout_digest(com.facebook.remoteexecution.cas.Digest stdout_digest) {
    this.stdout_digest = stdout_digest;
    return this;
  }

  public void unsetStdout_digest() {
    this.stdout_digest = null;
  }

  // Returns true if field stdout_digest is set (has been assigned a value) and false otherwise
  public boolean isSetStdout_digest() {
    return this.stdout_digest != null;
  }

  public void setStdout_digestIsSet(boolean value) {
    if (!value) {
      this.stdout_digest = null;
    }
  }

  public byte[]  getStderr_raw() {
    return this.stderr_raw;
  }

  public ActionResult setStderr_raw(byte[] stderr_raw) {
    this.stderr_raw = stderr_raw;
    return this;
  }

  public void unsetStderr_raw() {
    this.stderr_raw = null;
  }

  // Returns true if field stderr_raw is set (has been assigned a value) and false otherwise
  public boolean isSetStderr_raw() {
    return this.stderr_raw != null;
  }

  public void setStderr_rawIsSet(boolean value) {
    if (!value) {
      this.stderr_raw = null;
    }
  }

  public com.facebook.remoteexecution.cas.Digest  getStderr_digest() {
    return this.stderr_digest;
  }

  public ActionResult setStderr_digest(com.facebook.remoteexecution.cas.Digest stderr_digest) {
    this.stderr_digest = stderr_digest;
    return this;
  }

  public void unsetStderr_digest() {
    this.stderr_digest = null;
  }

  // Returns true if field stderr_digest is set (has been assigned a value) and false otherwise
  public boolean isSetStderr_digest() {
    return this.stderr_digest != null;
  }

  public void setStderr_digestIsSet(boolean value) {
    if (!value) {
      this.stderr_digest = null;
    }
  }

  public ExecutedActionMetadata  getExecution_metadata() {
    return this.execution_metadata;
  }

  public ActionResult setExecution_metadata(ExecutedActionMetadata execution_metadata) {
    this.execution_metadata = execution_metadata;
    return this;
  }

  public void unsetExecution_metadata() {
    this.execution_metadata = null;
  }

  // Returns true if field execution_metadata is set (has been assigned a value) and false otherwise
  public boolean isSetExecution_metadata() {
    return this.execution_metadata != null;
  }

  public void setExecution_metadataIsSet(boolean value) {
    if (!value) {
      this.execution_metadata = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case OUTPUT_FILES:
      if (value == null) {
        unsetOutput_files();
      } else {
        setOutput_files((List<OutputFile>)value);
      }
      break;

    case OUTPUT_DIRECTORIES:
      if (value == null) {
        unsetOutput_directories();
      } else {
        setOutput_directories((List<OutputDirectory>)value);
      }
      break;

    case EXIT_CODE:
      if (value == null) {
        unsetExit_code();
      } else {
        setExit_code((Integer)value);
      }
      break;

    case STDOUT_RAW:
      if (value == null) {
        unsetStdout_raw();
      } else {
        setStdout_raw((byte[])value);
      }
      break;

    case STDOUT_DIGEST:
      if (value == null) {
        unsetStdout_digest();
      } else {
        setStdout_digest((com.facebook.remoteexecution.cas.Digest)value);
      }
      break;

    case STDERR_RAW:
      if (value == null) {
        unsetStderr_raw();
      } else {
        setStderr_raw((byte[])value);
      }
      break;

    case STDERR_DIGEST:
      if (value == null) {
        unsetStderr_digest();
      } else {
        setStderr_digest((com.facebook.remoteexecution.cas.Digest)value);
      }
      break;

    case EXECUTION_METADATA:
      if (value == null) {
        unsetExecution_metadata();
      } else {
        setExecution_metadata((ExecutedActionMetadata)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OUTPUT_FILES:
      return getOutput_files();

    case OUTPUT_DIRECTORIES:
      return getOutput_directories();

    case EXIT_CODE:
      return new Integer(getExit_code());

    case STDOUT_RAW:
      return getStdout_raw();

    case STDOUT_DIGEST:
      return getStdout_digest();

    case STDERR_RAW:
      return getStderr_raw();

    case STDERR_DIGEST:
      return getStderr_digest();

    case EXECUTION_METADATA:
      return getExecution_metadata();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case OUTPUT_FILES:
      return isSetOutput_files();
    case OUTPUT_DIRECTORIES:
      return isSetOutput_directories();
    case EXIT_CODE:
      return isSetExit_code();
    case STDOUT_RAW:
      return isSetStdout_raw();
    case STDOUT_DIGEST:
      return isSetStdout_digest();
    case STDERR_RAW:
      return isSetStderr_raw();
    case STDERR_DIGEST:
      return isSetStderr_digest();
    case EXECUTION_METADATA:
      return isSetExecution_metadata();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionResult)
      return this.equals((ActionResult)that);
    return false;
  }

  public boolean equals(ActionResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_output_files = true && this.isSetOutput_files();
    boolean that_present_output_files = true && that.isSetOutput_files();
    if (this_present_output_files || that_present_output_files) {
      if (!(this_present_output_files && that_present_output_files))
        return false;
      if (!TBaseHelper.equalsNobinary(this.output_files, that.output_files))
        return false;
    }

    boolean this_present_output_directories = true && this.isSetOutput_directories();
    boolean that_present_output_directories = true && that.isSetOutput_directories();
    if (this_present_output_directories || that_present_output_directories) {
      if (!(this_present_output_directories && that_present_output_directories))
        return false;
      if (!TBaseHelper.equalsNobinary(this.output_directories, that.output_directories))
        return false;
    }

    boolean this_present_exit_code = true;
    boolean that_present_exit_code = true;
    if (this_present_exit_code || that_present_exit_code) {
      if (!(this_present_exit_code && that_present_exit_code))
        return false;
      if (!TBaseHelper.equalsNobinary(this.exit_code, that.exit_code))
        return false;
    }

    boolean this_present_stdout_raw = true && this.isSetStdout_raw();
    boolean that_present_stdout_raw = true && that.isSetStdout_raw();
    if (this_present_stdout_raw || that_present_stdout_raw) {
      if (!(this_present_stdout_raw && that_present_stdout_raw))
        return false;
      if (!TBaseHelper.equalsSlow(this.stdout_raw, that.stdout_raw))
        return false;
    }

    boolean this_present_stdout_digest = true && this.isSetStdout_digest();
    boolean that_present_stdout_digest = true && that.isSetStdout_digest();
    if (this_present_stdout_digest || that_present_stdout_digest) {
      if (!(this_present_stdout_digest && that_present_stdout_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stdout_digest, that.stdout_digest))
        return false;
    }

    boolean this_present_stderr_raw = true && this.isSetStderr_raw();
    boolean that_present_stderr_raw = true && that.isSetStderr_raw();
    if (this_present_stderr_raw || that_present_stderr_raw) {
      if (!(this_present_stderr_raw && that_present_stderr_raw))
        return false;
      if (!TBaseHelper.equalsSlow(this.stderr_raw, that.stderr_raw))
        return false;
    }

    boolean this_present_stderr_digest = true && this.isSetStderr_digest();
    boolean that_present_stderr_digest = true && that.isSetStderr_digest();
    if (this_present_stderr_digest || that_present_stderr_digest) {
      if (!(this_present_stderr_digest && that_present_stderr_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.stderr_digest, that.stderr_digest))
        return false;
    }

    boolean this_present_execution_metadata = true && this.isSetExecution_metadata();
    boolean that_present_execution_metadata = true && that.isSetExecution_metadata();
    if (this_present_execution_metadata || that_present_execution_metadata) {
      if (!(this_present_execution_metadata && that_present_execution_metadata))
        return false;
      if (!TBaseHelper.equalsNobinary(this.execution_metadata, that.execution_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ActionResult other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutput_files()).compareTo(other.isSetOutput_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(output_files, other.output_files);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOutput_directories()).compareTo(other.isSetOutput_directories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(output_directories, other.output_directories);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExit_code()).compareTo(other.isSetExit_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(exit_code, other.exit_code);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStdout_raw()).compareTo(other.isSetStdout_raw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stdout_raw, other.stdout_raw);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStdout_digest()).compareTo(other.isSetStdout_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stdout_digest, other.stdout_digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStderr_raw()).compareTo(other.isSetStderr_raw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stderr_raw, other.stderr_raw);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStderr_digest()).compareTo(other.isSetStderr_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stderr_digest, other.stderr_digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExecution_metadata()).compareTo(other.isSetExecution_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(execution_metadata, other.execution_metadata);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case OUTPUT_FILES:
          if (field.type == TType.LIST) {
            {
              TList _list24 = iprot.readListBegin();
              this.output_files = new ArrayList<OutputFile>(Math.max(0, _list24.size));
              for (int _i25 = 0; 
                   (_list24.size < 0) ? iprot.peekList() : (_i25 < _list24.size); 
                   ++_i25)
              {
                OutputFile _elem26;
                _elem26 = new OutputFile();
                _elem26.read(iprot);
                this.output_files.add(_elem26);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OUTPUT_DIRECTORIES:
          if (field.type == TType.LIST) {
            {
              TList _list27 = iprot.readListBegin();
              this.output_directories = new ArrayList<OutputDirectory>(Math.max(0, _list27.size));
              for (int _i28 = 0; 
                   (_list27.size < 0) ? iprot.peekList() : (_i28 < _list27.size); 
                   ++_i28)
              {
                OutputDirectory _elem29;
                _elem29 = new OutputDirectory();
                _elem29.read(iprot);
                this.output_directories.add(_elem29);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXIT_CODE:
          if (field.type == TType.I32) {
            this.exit_code = iprot.readI32();
            setExit_codeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STDOUT_RAW:
          if (field.type == TType.STRING) {
            this.stdout_raw = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STDOUT_DIGEST:
          if (field.type == TType.STRUCT) {
            this.stdout_digest = new com.facebook.remoteexecution.cas.Digest();
            this.stdout_digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STDERR_RAW:
          if (field.type == TType.STRING) {
            this.stderr_raw = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STDERR_DIGEST:
          if (field.type == TType.STRUCT) {
            this.stderr_digest = new com.facebook.remoteexecution.cas.Digest();
            this.stderr_digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_METADATA:
          if (field.type == TType.STRUCT) {
            this.execution_metadata = new ExecutedActionMetadata();
            this.execution_metadata.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.output_files != null) {
      oprot.writeFieldBegin(OUTPUT_FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.output_files.size()));
        for (OutputFile _iter30 : this.output_files)        {
          _iter30.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.output_directories != null) {
      oprot.writeFieldBegin(OUTPUT_DIRECTORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.output_directories.size()));
        for (OutputDirectory _iter31 : this.output_directories)        {
          _iter31.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXIT_CODE_FIELD_DESC);
    oprot.writeI32(this.exit_code);
    oprot.writeFieldEnd();
    if (this.stdout_raw != null) {
      if (isSetStdout_raw()) {
        oprot.writeFieldBegin(STDOUT_RAW_FIELD_DESC);
        oprot.writeBinary(this.stdout_raw);
        oprot.writeFieldEnd();
      }
    }
    if (this.stdout_digest != null) {
      if (isSetStdout_digest()) {
        oprot.writeFieldBegin(STDOUT_DIGEST_FIELD_DESC);
        this.stdout_digest.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.stderr_raw != null) {
      if (isSetStderr_raw()) {
        oprot.writeFieldBegin(STDERR_RAW_FIELD_DESC);
        oprot.writeBinary(this.stderr_raw);
        oprot.writeFieldEnd();
      }
    }
    if (this.stderr_digest != null) {
      if (isSetStderr_digest()) {
        oprot.writeFieldBegin(STDERR_DIGEST_FIELD_DESC);
        this.stderr_digest.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.execution_metadata != null) {
      oprot.writeFieldBegin(EXECUTION_METADATA_FIELD_DESC);
      this.execution_metadata.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ActionResult");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("output_files");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getOutput_files() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getOutput_files(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("output_directories");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getOutput_directories() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getOutput_directories(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("exit_code");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getExit_code(), indent + 1, prettyPrint));
    first = false;
    if (isSetStdout_raw())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stdout_raw");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStdout_raw() == null) {
        sb.append("null");
      } else {
          int __stdout_raw_size = Math.min(this. getStdout_raw().length, 128);
          for (int i = 0; i < __stdout_raw_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this. getStdout_raw()[i]).length() > 1 ? Integer.toHexString(this. getStdout_raw()[i]).substring(Integer.toHexString(this. getStdout_raw()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getStdout_raw()[i]).toUpperCase());
          }
          if (this. getStdout_raw().length > 128) sb.append(" ...");
      }
      first = false;
    }
    if (isSetStdout_digest())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stdout_digest");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStdout_digest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStdout_digest(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetStderr_raw())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stderr_raw");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStderr_raw() == null) {
        sb.append("null");
      } else {
          int __stderr_raw_size = Math.min(this. getStderr_raw().length, 128);
          for (int i = 0; i < __stderr_raw_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this. getStderr_raw()[i]).length() > 1 ? Integer.toHexString(this. getStderr_raw()[i]).substring(Integer.toHexString(this. getStderr_raw()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getStderr_raw()[i]).toUpperCase());
          }
          if (this. getStderr_raw().length > 128) sb.append(" ...");
      }
      first = false;
    }
    if (isSetStderr_digest())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("stderr_digest");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getStderr_digest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getStderr_digest(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("execution_metadata");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getExecution_metadata() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getExecution_metadata(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

