/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SymlinkNode implements TBase, java.io.Serializable, Cloneable, Comparable<SymlinkNode> {
  private static final TStruct STRUCT_DESC = new TStruct("SymlinkNode");
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField TARGET_FIELD_DESC = new TField("target", TType.STRING, (short)2);
  private static final TField IS_DIRECTORY_FIELD_DESC = new TField("is_directory", TType.BOOL, (short)3);

  public String name;
  public String target;
  public boolean is_directory;
  public static final int NAME = 1;
  public static final int TARGET = 2;
  public static final int IS_DIRECTORY = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __IS_DIRECTORY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TARGET, new FieldMetaData("target", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(IS_DIRECTORY, new FieldMetaData("is_directory", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SymlinkNode.class, metaDataMap);
  }

  public SymlinkNode() {
  }

  public SymlinkNode(
    String name,
    String target,
    boolean is_directory)
  {
    this();
    this.name = name;
    this.target = target;
    this.is_directory = is_directory;
    setIs_directoryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SymlinkNode(SymlinkNode other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = TBaseHelper.deepCopy(other.name);
    }
    if (other.isSetTarget()) {
      this.target = TBaseHelper.deepCopy(other.target);
    }
    this.is_directory = TBaseHelper.deepCopy(other.is_directory);
  }

  public SymlinkNode deepCopy() {
    return new SymlinkNode(this);
  }

  @Deprecated
  public SymlinkNode clone() {
    return new SymlinkNode(this);
  }

  public String  getName() {
    return this.name;
  }

  public SymlinkNode setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String  getTarget() {
    return this.target;
  }

  public SymlinkNode setTarget(String target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  // Returns true if field target is set (has been assigned a value) and false otherwise
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public boolean  isIs_directory() {
    return this.is_directory;
  }

  public SymlinkNode setIs_directory(boolean is_directory) {
    this.is_directory = is_directory;
    setIs_directoryIsSet(true);
    return this;
  }

  public void unsetIs_directory() {
    __isset_bit_vector.clear(__IS_DIRECTORY_ISSET_ID);
  }

  // Returns true if field is_directory is set (has been assigned a value) and false otherwise
  public boolean isSetIs_directory() {
    return __isset_bit_vector.get(__IS_DIRECTORY_ISSET_ID);
  }

  public void setIs_directoryIsSet(boolean value) {
    __isset_bit_vector.set(__IS_DIRECTORY_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((String)value);
      }
      break;

    case IS_DIRECTORY:
      if (value == null) {
        unsetIs_directory();
      } else {
        setIs_directory((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NAME:
      return getName();

    case TARGET:
      return getTarget();

    case IS_DIRECTORY:
      return new Boolean(isIs_directory());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case NAME:
      return isSetName();
    case TARGET:
      return isSetTarget();
    case IS_DIRECTORY:
      return isSetIs_directory();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SymlinkNode)
      return this.equals((SymlinkNode)that);
    return false;
  }

  public boolean equals(SymlinkNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!TBaseHelper.equalsNobinary(this.name, that.name))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!TBaseHelper.equalsNobinary(this.target, that.target))
        return false;
    }

    boolean this_present_is_directory = true;
    boolean that_present_is_directory = true;
    if (this_present_is_directory || that_present_is_directory) {
      if (!(this_present_is_directory && that_present_is_directory))
        return false;
      if (!TBaseHelper.equalsNobinary(this.is_directory, that.is_directory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SymlinkNode other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, other.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(target, other.target);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIs_directory()).compareTo(other.isSetIs_directory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(is_directory, other.is_directory);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGET:
          if (field.type == TType.STRING) {
            this.target = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_DIRECTORY:
          if (field.type == TType.BOOL) {
            this.is_directory = iprot.readBool();
            setIs_directoryIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.target != null) {
      oprot.writeFieldBegin(TARGET_FIELD_DESC);
      oprot.writeString(this.target);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_DIRECTORY_FIELD_DESC);
    oprot.writeBool(this.is_directory);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SymlinkNode");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("name");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getName() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getName(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("target");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTarget() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTarget(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("is_directory");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIs_directory(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

