/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Directory implements TBase, java.io.Serializable, Cloneable, Comparable<Directory> {
  private static final TStruct STRUCT_DESC = new TStruct("Directory");
  private static final TField FILES_FIELD_DESC = new TField("files", TType.LIST, (short)1);
  private static final TField DIRECTORIES_FIELD_DESC = new TField("directories", TType.LIST, (short)2);
  private static final TField SYMLINKS_FIELD_DESC = new TField("symlinks", TType.LIST, (short)3);

  public List<FileNode> files;
  public List<DirectoryNode> directories;
  public List<SymlinkNode> symlinks;
  public static final int FILES = 1;
  public static final int DIRECTORIES = 2;
  public static final int SYMLINKS = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(FILES, new FieldMetaData("files", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, FileNode.class))));
    tmpMetaDataMap.put(DIRECTORIES, new FieldMetaData("directories", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, DirectoryNode.class))));
    tmpMetaDataMap.put(SYMLINKS, new FieldMetaData("symlinks", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, SymlinkNode.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Directory.class, metaDataMap);
  }

  public Directory() {
  }

  public Directory(
    List<FileNode> files,
    List<DirectoryNode> directories,
    List<SymlinkNode> symlinks)
  {
    this();
    this.files = files;
    this.directories = directories;
    this.symlinks = symlinks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Directory(Directory other) {
    if (other.isSetFiles()) {
      this.files = TBaseHelper.deepCopy(other.files);
    }
    if (other.isSetDirectories()) {
      this.directories = TBaseHelper.deepCopy(other.directories);
    }
    if (other.isSetSymlinks()) {
      this.symlinks = TBaseHelper.deepCopy(other.symlinks);
    }
  }

  public Directory deepCopy() {
    return new Directory(this);
  }

  @Deprecated
  public Directory clone() {
    return new Directory(this);
  }

  public List<FileNode>  getFiles() {
    return this.files;
  }

  public Directory setFiles(List<FileNode> files) {
    this.files = files;
    return this;
  }

  public void unsetFiles() {
    this.files = null;
  }

  // Returns true if field files is set (has been assigned a value) and false otherwise
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean value) {
    if (!value) {
      this.files = null;
    }
  }

  public List<DirectoryNode>  getDirectories() {
    return this.directories;
  }

  public Directory setDirectories(List<DirectoryNode> directories) {
    this.directories = directories;
    return this;
  }

  public void unsetDirectories() {
    this.directories = null;
  }

  // Returns true if field directories is set (has been assigned a value) and false otherwise
  public boolean isSetDirectories() {
    return this.directories != null;
  }

  public void setDirectoriesIsSet(boolean value) {
    if (!value) {
      this.directories = null;
    }
  }

  public List<SymlinkNode>  getSymlinks() {
    return this.symlinks;
  }

  public Directory setSymlinks(List<SymlinkNode> symlinks) {
    this.symlinks = symlinks;
    return this;
  }

  public void unsetSymlinks() {
    this.symlinks = null;
  }

  // Returns true if field symlinks is set (has been assigned a value) and false otherwise
  public boolean isSetSymlinks() {
    return this.symlinks != null;
  }

  public void setSymlinksIsSet(boolean value) {
    if (!value) {
      this.symlinks = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((List<FileNode>)value);
      }
      break;

    case DIRECTORIES:
      if (value == null) {
        unsetDirectories();
      } else {
        setDirectories((List<DirectoryNode>)value);
      }
      break;

    case SYMLINKS:
      if (value == null) {
        unsetSymlinks();
      } else {
        setSymlinks((List<SymlinkNode>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FILES:
      return getFiles();

    case DIRECTORIES:
      return getDirectories();

    case SYMLINKS:
      return getSymlinks();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case FILES:
      return isSetFiles();
    case DIRECTORIES:
      return isSetDirectories();
    case SYMLINKS:
      return isSetSymlinks();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Directory)
      return this.equals((Directory)that);
    return false;
  }

  public boolean equals(Directory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_files = true && this.isSetFiles();
    boolean that_present_files = true && that.isSetFiles();
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (!TBaseHelper.equalsNobinary(this.files, that.files))
        return false;
    }

    boolean this_present_directories = true && this.isSetDirectories();
    boolean that_present_directories = true && that.isSetDirectories();
    if (this_present_directories || that_present_directories) {
      if (!(this_present_directories && that_present_directories))
        return false;
      if (!TBaseHelper.equalsNobinary(this.directories, that.directories))
        return false;
    }

    boolean this_present_symlinks = true && this.isSetSymlinks();
    boolean that_present_symlinks = true && that.isSetSymlinks();
    if (this_present_symlinks || that_present_symlinks) {
      if (!(this_present_symlinks && that_present_symlinks))
        return false;
      if (!TBaseHelper.equalsNobinary(this.symlinks, that.symlinks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Directory other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(files, other.files);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDirectories()).compareTo(other.isSetDirectories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(directories, other.directories);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSymlinks()).compareTo(other.isSetSymlinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(symlinks, other.symlinks);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case FILES:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.files = new ArrayList<FileNode>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                FileNode _elem2;
                _elem2 = new FileNode();
                _elem2.read(iprot);
                this.files.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIRECTORIES:
          if (field.type == TType.LIST) {
            {
              TList _list3 = iprot.readListBegin();
              this.directories = new ArrayList<DirectoryNode>(Math.max(0, _list3.size));
              for (int _i4 = 0; 
                   (_list3.size < 0) ? iprot.peekList() : (_i4 < _list3.size); 
                   ++_i4)
              {
                DirectoryNode _elem5;
                _elem5 = new DirectoryNode();
                _elem5.read(iprot);
                this.directories.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYMLINKS:
          if (field.type == TType.LIST) {
            {
              TList _list6 = iprot.readListBegin();
              this.symlinks = new ArrayList<SymlinkNode>(Math.max(0, _list6.size));
              for (int _i7 = 0; 
                   (_list6.size < 0) ? iprot.peekList() : (_i7 < _list6.size); 
                   ++_i7)
              {
                SymlinkNode _elem8;
                _elem8 = new SymlinkNode();
                _elem8.read(iprot);
                this.symlinks.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.files != null) {
      oprot.writeFieldBegin(FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.files.size()));
        for (FileNode _iter9 : this.files)        {
          _iter9.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.directories != null) {
      oprot.writeFieldBegin(DIRECTORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.directories.size()));
        for (DirectoryNode _iter10 : this.directories)        {
          _iter10.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.symlinks != null) {
      oprot.writeFieldBegin(SYMLINKS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.symlinks.size()));
        for (SymlinkNode _iter11 : this.symlinks)        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Directory");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("files");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getFiles() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getFiles(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("directories");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDirectories() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDirectories(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("symlinks");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSymlinks() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSymlinks(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

