/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ContentAddressableStorage {

  public interface Iface {

    public UpdateBlobResponse updateBlob(UpdateBlobRequest request) throws ContentAddressableStorageException, TException;

    public BatchUpdateBlobsResponse batchUpdateBlobs(BatchUpdateBlobsRequest request) throws ContentAddressableStorageException, TException;

    public ReadBlobResponse readBlob(ReadBlobRequest request) throws ContentAddressableStorageException, TException;

    public BatchReadBlobsResponse batchReadBlobs(BatchReadBlobsRequest request) throws ContentAddressableStorageException, TException;

    public FindMissingBlobsResponse findMissingBlobs(FindMissingBlobsRequest request) throws ContentAddressableStorageException, TException;

    public GetTreeResponse getTree(GetTreeRequest request) throws ContentAddressableStorageException, TException;

  }

  public interface AsyncIface {

    public void updateBlob(UpdateBlobRequest request, AsyncMethodCallback resultHandler) throws TException;

    public void batchUpdateBlobs(BatchUpdateBlobsRequest request, AsyncMethodCallback resultHandler) throws TException;

    public void readBlob(ReadBlobRequest request, AsyncMethodCallback resultHandler) throws TException;

    public void batchReadBlobs(BatchReadBlobsRequest request, AsyncMethodCallback resultHandler) throws TException;

    public void findMissingBlobs(FindMissingBlobsRequest request, AsyncMethodCallback resultHandler) throws TException;

    public void getTree(GetTreeRequest request, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends EventHandlerBase implements Iface, TClientIf {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    @Override
    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    @Override
    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public UpdateBlobResponse updateBlob(UpdateBlobRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.updateBlob", null);
      this.setContextStack(ctx);
      send_updateBlob(request);
      return recv_updateBlob();
    }

    public void send_updateBlob(UpdateBlobRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.updateBlob", null);
      oprot_.writeMessageBegin(new TMessage("updateBlob", TMessageType.CALL, seqid_));
      updateBlob_args args = new updateBlob_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.updateBlob", args);
      return;
    }

    public UpdateBlobResponse recv_updateBlob() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.updateBlob");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      updateBlob_result result = new updateBlob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.updateBlob", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBlob failed: unknown result");
    }

    public BatchUpdateBlobsResponse batchUpdateBlobs(BatchUpdateBlobsRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.batchUpdateBlobs", null);
      this.setContextStack(ctx);
      send_batchUpdateBlobs(request);
      return recv_batchUpdateBlobs();
    }

    public void send_batchUpdateBlobs(BatchUpdateBlobsRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.batchUpdateBlobs", null);
      oprot_.writeMessageBegin(new TMessage("batchUpdateBlobs", TMessageType.CALL, seqid_));
      batchUpdateBlobs_args args = new batchUpdateBlobs_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.batchUpdateBlobs", args);
      return;
    }

    public BatchUpdateBlobsResponse recv_batchUpdateBlobs() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.batchUpdateBlobs");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      batchUpdateBlobs_result result = new batchUpdateBlobs_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.batchUpdateBlobs", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batchUpdateBlobs failed: unknown result");
    }

    public ReadBlobResponse readBlob(ReadBlobRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.readBlob", null);
      this.setContextStack(ctx);
      send_readBlob(request);
      return recv_readBlob();
    }

    public void send_readBlob(ReadBlobRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.readBlob", null);
      oprot_.writeMessageBegin(new TMessage("readBlob", TMessageType.CALL, seqid_));
      readBlob_args args = new readBlob_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.readBlob", args);
      return;
    }

    public ReadBlobResponse recv_readBlob() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.readBlob");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      readBlob_result result = new readBlob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.readBlob", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "readBlob failed: unknown result");
    }

    public BatchReadBlobsResponse batchReadBlobs(BatchReadBlobsRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.batchReadBlobs", null);
      this.setContextStack(ctx);
      send_batchReadBlobs(request);
      return recv_batchReadBlobs();
    }

    public void send_batchReadBlobs(BatchReadBlobsRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.batchReadBlobs", null);
      oprot_.writeMessageBegin(new TMessage("batchReadBlobs", TMessageType.CALL, seqid_));
      batchReadBlobs_args args = new batchReadBlobs_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.batchReadBlobs", args);
      return;
    }

    public BatchReadBlobsResponse recv_batchReadBlobs() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.batchReadBlobs");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      batchReadBlobs_result result = new batchReadBlobs_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.batchReadBlobs", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batchReadBlobs failed: unknown result");
    }

    public FindMissingBlobsResponse findMissingBlobs(FindMissingBlobsRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.findMissingBlobs", null);
      this.setContextStack(ctx);
      send_findMissingBlobs(request);
      return recv_findMissingBlobs();
    }

    public void send_findMissingBlobs(FindMissingBlobsRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.findMissingBlobs", null);
      oprot_.writeMessageBegin(new TMessage("findMissingBlobs", TMessageType.CALL, seqid_));
      findMissingBlobs_args args = new findMissingBlobs_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.findMissingBlobs", args);
      return;
    }

    public FindMissingBlobsResponse recv_findMissingBlobs() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.findMissingBlobs");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      findMissingBlobs_result result = new findMissingBlobs_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.findMissingBlobs", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findMissingBlobs failed: unknown result");
    }

    public GetTreeResponse getTree(GetTreeRequest request) throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = getContextStack("ContentAddressableStorage.getTree", null);
      this.setContextStack(ctx);
      send_getTree(request);
      return recv_getTree();
    }

    public void send_getTree(GetTreeRequest request) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ContentAddressableStorage.getTree", null);
      oprot_.writeMessageBegin(new TMessage("getTree", TMessageType.CALL, seqid_));
      getTree_args args = new getTree_args();
      args.request = request;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ContentAddressableStorage.getTree", args);
      return;
    }

    public GetTreeResponse recv_getTree() throws ContentAddressableStorageException, TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ContentAddressableStorage.getTree");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getTree_result result = new getTree_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ContentAddressableStorage.getTree", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTree failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateBlob(UpdateBlobRequest request, AsyncMethodCallback resultHandler53) throws TException {
      checkReady();
      updateBlob_call method_call = new updateBlob_call(request, resultHandler53, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBlob_call extends TAsyncMethodCall {
      private UpdateBlobRequest request;
      public updateBlob_call(UpdateBlobRequest request, AsyncMethodCallback resultHandler54, TAsyncClient client50, TProtocolFactory protocolFactory51, TNonblockingTransport transport52) throws TException {
        super(client50, protocolFactory51, transport52, resultHandler54, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateBlob", TMessageType.CALL, 0));
        updateBlob_args args = new updateBlob_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UpdateBlobResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBlob();
      }
    }

    public void batchUpdateBlobs(BatchUpdateBlobsRequest request, AsyncMethodCallback resultHandler58) throws TException {
      checkReady();
      batchUpdateBlobs_call method_call = new batchUpdateBlobs_call(request, resultHandler58, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchUpdateBlobs_call extends TAsyncMethodCall {
      private BatchUpdateBlobsRequest request;
      public batchUpdateBlobs_call(BatchUpdateBlobsRequest request, AsyncMethodCallback resultHandler59, TAsyncClient client55, TProtocolFactory protocolFactory56, TNonblockingTransport transport57) throws TException {
        super(client55, protocolFactory56, transport57, resultHandler59, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("batchUpdateBlobs", TMessageType.CALL, 0));
        batchUpdateBlobs_args args = new batchUpdateBlobs_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BatchUpdateBlobsResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchUpdateBlobs();
      }
    }

    public void readBlob(ReadBlobRequest request, AsyncMethodCallback resultHandler63) throws TException {
      checkReady();
      readBlob_call method_call = new readBlob_call(request, resultHandler63, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readBlob_call extends TAsyncMethodCall {
      private ReadBlobRequest request;
      public readBlob_call(ReadBlobRequest request, AsyncMethodCallback resultHandler64, TAsyncClient client60, TProtocolFactory protocolFactory61, TNonblockingTransport transport62) throws TException {
        super(client60, protocolFactory61, transport62, resultHandler64, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("readBlob", TMessageType.CALL, 0));
        readBlob_args args = new readBlob_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReadBlobResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readBlob();
      }
    }

    public void batchReadBlobs(BatchReadBlobsRequest request, AsyncMethodCallback resultHandler68) throws TException {
      checkReady();
      batchReadBlobs_call method_call = new batchReadBlobs_call(request, resultHandler68, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchReadBlobs_call extends TAsyncMethodCall {
      private BatchReadBlobsRequest request;
      public batchReadBlobs_call(BatchReadBlobsRequest request, AsyncMethodCallback resultHandler69, TAsyncClient client65, TProtocolFactory protocolFactory66, TNonblockingTransport transport67) throws TException {
        super(client65, protocolFactory66, transport67, resultHandler69, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("batchReadBlobs", TMessageType.CALL, 0));
        batchReadBlobs_args args = new batchReadBlobs_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BatchReadBlobsResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchReadBlobs();
      }
    }

    public void findMissingBlobs(FindMissingBlobsRequest request, AsyncMethodCallback resultHandler73) throws TException {
      checkReady();
      findMissingBlobs_call method_call = new findMissingBlobs_call(request, resultHandler73, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMissingBlobs_call extends TAsyncMethodCall {
      private FindMissingBlobsRequest request;
      public findMissingBlobs_call(FindMissingBlobsRequest request, AsyncMethodCallback resultHandler74, TAsyncClient client70, TProtocolFactory protocolFactory71, TNonblockingTransport transport72) throws TException {
        super(client70, protocolFactory71, transport72, resultHandler74, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("findMissingBlobs", TMessageType.CALL, 0));
        findMissingBlobs_args args = new findMissingBlobs_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FindMissingBlobsResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMissingBlobs();
      }
    }

    public void getTree(GetTreeRequest request, AsyncMethodCallback resultHandler78) throws TException {
      checkReady();
      getTree_call method_call = new getTree_call(request, resultHandler78, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTree_call extends TAsyncMethodCall {
      private GetTreeRequest request;
      public getTree_call(GetTreeRequest request, AsyncMethodCallback resultHandler79, TAsyncClient client75, TProtocolFactory protocolFactory76, TNonblockingTransport transport77) throws TException {
        super(client75, protocolFactory76, transport77, resultHandler79, false);
        this.request = request;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getTree", TMessageType.CALL, 0));
        getTree_args args = new getTree_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetTreeResponse getResult() throws ContentAddressableStorageException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTree();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      event_handler_ = new TProcessorEventHandler(); // Empty handler
      processMap_.put("updateBlob", new updateBlob());
      processMap_.put("batchUpdateBlobs", new batchUpdateBlobs());
      processMap_.put("readBlob", new readBlob());
      processMap_.put("batchReadBlobs", new batchReadBlobs());
      processMap_.put("findMissingBlobs", new findMissingBlobs());
      processMap_.put("getTree", new getTree());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException;
    }

    public void setEventHandler(TProcessorEventHandler handler) {
      this.event_handler_ = handler;
    }

    private Iface iface_;
    protected TProcessorEventHandler event_handler_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot, server_ctx);
      return true;
    }

    private class updateBlob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.updateBlob", server_ctx);
        updateBlob_args args = new updateBlob_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.updateBlob");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.updateBlob", args);
        updateBlob_result result = new updateBlob_result();
        try {
          result.success = iface_.updateBlob(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.updateBlob", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.updateBlob", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.updateBlob", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.updateBlob");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.updateBlob", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.updateBlob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.updateBlob", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.updateBlob", result);
        oprot.writeMessageBegin(new TMessage("updateBlob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.updateBlob", result);
      }

    }

    private class batchUpdateBlobs implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.batchUpdateBlobs", server_ctx);
        batchUpdateBlobs_args args = new batchUpdateBlobs_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", args);
        batchUpdateBlobs_result result = new batchUpdateBlobs_result();
        try {
          result.success = iface_.batchUpdateBlobs(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.batchUpdateBlobs", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.batchUpdateBlobs");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.batchUpdateBlobs", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", result);
        oprot.writeMessageBegin(new TMessage("batchUpdateBlobs", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.batchUpdateBlobs", result);
      }

    }

    private class readBlob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.readBlob", server_ctx);
        readBlob_args args = new readBlob_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.readBlob");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.readBlob", args);
        readBlob_result result = new readBlob_result();
        try {
          result.success = iface_.readBlob(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.readBlob", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.readBlob", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.readBlob", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.readBlob");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.readBlob", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.readBlob", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.readBlob", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.readBlob", result);
        oprot.writeMessageBegin(new TMessage("readBlob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.readBlob", result);
      }

    }

    private class batchReadBlobs implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.batchReadBlobs", server_ctx);
        batchReadBlobs_args args = new batchReadBlobs_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.batchReadBlobs");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.batchReadBlobs", args);
        batchReadBlobs_result result = new batchReadBlobs_result();
        try {
          result.success = iface_.batchReadBlobs(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.batchReadBlobs", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.batchReadBlobs", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.batchReadBlobs", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.batchReadBlobs");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.batchReadBlobs", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.batchReadBlobs", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.batchReadBlobs", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.batchReadBlobs", result);
        oprot.writeMessageBegin(new TMessage("batchReadBlobs", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.batchReadBlobs", result);
      }

    }

    private class findMissingBlobs implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.findMissingBlobs", server_ctx);
        findMissingBlobs_args args = new findMissingBlobs_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.findMissingBlobs");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.findMissingBlobs", args);
        findMissingBlobs_result result = new findMissingBlobs_result();
        try {
          result.success = iface_.findMissingBlobs(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.findMissingBlobs", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.findMissingBlobs", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.findMissingBlobs", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.findMissingBlobs");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.findMissingBlobs", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.findMissingBlobs", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.findMissingBlobs", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.findMissingBlobs", result);
        oprot.writeMessageBegin(new TMessage("findMissingBlobs", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.findMissingBlobs", result);
      }

    }

    private class getTree implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ContentAddressableStorage.getTree", server_ctx);
        getTree_args args = new getTree_args();
        event_handler_.preRead(handler_ctx, "ContentAddressableStorage.getTree");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ContentAddressableStorage.getTree", args);
        getTree_result result = new getTree_result();
        try {
          result.success = iface_.getTree(args.request);
        } catch (ContentAddressableStorageException ex) {
          result.ex = ex;
          event_handler_.declaredUserException(handler_ctx, "ContentAddressableStorage.getTree", ex);
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ContentAddressableStorage.getTree", th);
          event_handler_.handlerError(handler_ctx, "ContentAddressableStorage.getTree", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ContentAddressableStorage.getTree");
          event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.getTree", null);
          oprot.writeMessageBegin(new TMessage("ContentAddressableStorage.getTree", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.getTree", null);
          return;
        }
        event_handler_.preWrite(handler_ctx, "ContentAddressableStorage.getTree", result);
        oprot.writeMessageBegin(new TMessage("getTree", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ContentAddressableStorage.getTree", result);
      }

    }

  }

  public static class updateBlob_args implements TBase, java.io.Serializable, Cloneable, Comparable<updateBlob_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBlob_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public UpdateBlobRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, UpdateBlobRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(updateBlob_args.class, metaDataMap);
    }

    public updateBlob_args() {
    }

    public updateBlob_args(
      UpdateBlobRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBlob_args(updateBlob_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public updateBlob_args deepCopy() {
      return new updateBlob_args(this);
    }

    @Deprecated
    public updateBlob_args clone() {
      return new updateBlob_args(this);
    }

    public UpdateBlobRequest  getRequest() {
      return this.request;
    }

    public updateBlob_args setRequest(UpdateBlobRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((UpdateBlobRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBlob_args)
        return this.equals((updateBlob_args)that);
      return false;
    }

    public boolean equals(updateBlob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateBlob_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new UpdateBlobRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("updateBlob_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class updateBlob_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBlob_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public UpdateBlobResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, UpdateBlobResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(updateBlob_result.class, metaDataMap);
    }

    public updateBlob_result() {
    }

    public updateBlob_result(
      UpdateBlobResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBlob_result(updateBlob_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public updateBlob_result deepCopy() {
      return new updateBlob_result(this);
    }

    @Deprecated
    public updateBlob_result clone() {
      return new updateBlob_result(this);
    }

    public UpdateBlobResponse  getSuccess() {
      return this.success;
    }

    public updateBlob_result setSuccess(UpdateBlobResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public updateBlob_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UpdateBlobResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBlob_result)
        return this.equals((updateBlob_result)that);
      return false;
    }

    public boolean equals(updateBlob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new UpdateBlobResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("updateBlob_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class batchUpdateBlobs_args implements TBase, java.io.Serializable, Cloneable, Comparable<batchUpdateBlobs_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("batchUpdateBlobs_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public BatchUpdateBlobsRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BatchUpdateBlobsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(batchUpdateBlobs_args.class, metaDataMap);
    }

    public batchUpdateBlobs_args() {
    }

    public batchUpdateBlobs_args(
      BatchUpdateBlobsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateBlobs_args(batchUpdateBlobs_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public batchUpdateBlobs_args deepCopy() {
      return new batchUpdateBlobs_args(this);
    }

    @Deprecated
    public batchUpdateBlobs_args clone() {
      return new batchUpdateBlobs_args(this);
    }

    public BatchUpdateBlobsRequest  getRequest() {
      return this.request;
    }

    public batchUpdateBlobs_args setRequest(BatchUpdateBlobsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((BatchUpdateBlobsRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateBlobs_args)
        return this.equals((batchUpdateBlobs_args)that);
      return false;
    }

    public boolean equals(batchUpdateBlobs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchUpdateBlobs_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new BatchUpdateBlobsRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("batchUpdateBlobs_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class batchUpdateBlobs_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("batchUpdateBlobs_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public BatchUpdateBlobsResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BatchUpdateBlobsResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(batchUpdateBlobs_result.class, metaDataMap);
    }

    public batchUpdateBlobs_result() {
    }

    public batchUpdateBlobs_result(
      BatchUpdateBlobsResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateBlobs_result(batchUpdateBlobs_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public batchUpdateBlobs_result deepCopy() {
      return new batchUpdateBlobs_result(this);
    }

    @Deprecated
    public batchUpdateBlobs_result clone() {
      return new batchUpdateBlobs_result(this);
    }

    public BatchUpdateBlobsResponse  getSuccess() {
      return this.success;
    }

    public batchUpdateBlobs_result setSuccess(BatchUpdateBlobsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public batchUpdateBlobs_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BatchUpdateBlobsResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateBlobs_result)
        return this.equals((batchUpdateBlobs_result)that);
      return false;
    }

    public boolean equals(batchUpdateBlobs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new BatchUpdateBlobsResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("batchUpdateBlobs_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class readBlob_args implements TBase, java.io.Serializable, Cloneable, Comparable<readBlob_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("readBlob_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public ReadBlobRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ReadBlobRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(readBlob_args.class, metaDataMap);
    }

    public readBlob_args() {
    }

    public readBlob_args(
      ReadBlobRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBlob_args(readBlob_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public readBlob_args deepCopy() {
      return new readBlob_args(this);
    }

    @Deprecated
    public readBlob_args clone() {
      return new readBlob_args(this);
    }

    public ReadBlobRequest  getRequest() {
      return this.request;
    }

    public readBlob_args setRequest(ReadBlobRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ReadBlobRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readBlob_args)
        return this.equals((readBlob_args)that);
      return false;
    }

    public boolean equals(readBlob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readBlob_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new ReadBlobRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("readBlob_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class readBlob_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("readBlob_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public ReadBlobResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ReadBlobResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(readBlob_result.class, metaDataMap);
    }

    public readBlob_result() {
    }

    public readBlob_result(
      ReadBlobResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBlob_result(readBlob_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public readBlob_result deepCopy() {
      return new readBlob_result(this);
    }

    @Deprecated
    public readBlob_result clone() {
      return new readBlob_result(this);
    }

    public ReadBlobResponse  getSuccess() {
      return this.success;
    }

    public readBlob_result setSuccess(ReadBlobResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public readBlob_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReadBlobResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readBlob_result)
        return this.equals((readBlob_result)that);
      return false;
    }

    public boolean equals(readBlob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ReadBlobResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("readBlob_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class batchReadBlobs_args implements TBase, java.io.Serializable, Cloneable, Comparable<batchReadBlobs_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("batchReadBlobs_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public BatchReadBlobsRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BatchReadBlobsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(batchReadBlobs_args.class, metaDataMap);
    }

    public batchReadBlobs_args() {
    }

    public batchReadBlobs_args(
      BatchReadBlobsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchReadBlobs_args(batchReadBlobs_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public batchReadBlobs_args deepCopy() {
      return new batchReadBlobs_args(this);
    }

    @Deprecated
    public batchReadBlobs_args clone() {
      return new batchReadBlobs_args(this);
    }

    public BatchReadBlobsRequest  getRequest() {
      return this.request;
    }

    public batchReadBlobs_args setRequest(BatchReadBlobsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((BatchReadBlobsRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchReadBlobs_args)
        return this.equals((batchReadBlobs_args)that);
      return false;
    }

    public boolean equals(batchReadBlobs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchReadBlobs_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new BatchReadBlobsRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("batchReadBlobs_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class batchReadBlobs_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("batchReadBlobs_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public BatchReadBlobsResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BatchReadBlobsResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(batchReadBlobs_result.class, metaDataMap);
    }

    public batchReadBlobs_result() {
    }

    public batchReadBlobs_result(
      BatchReadBlobsResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchReadBlobs_result(batchReadBlobs_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public batchReadBlobs_result deepCopy() {
      return new batchReadBlobs_result(this);
    }

    @Deprecated
    public batchReadBlobs_result clone() {
      return new batchReadBlobs_result(this);
    }

    public BatchReadBlobsResponse  getSuccess() {
      return this.success;
    }

    public batchReadBlobs_result setSuccess(BatchReadBlobsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public batchReadBlobs_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BatchReadBlobsResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchReadBlobs_result)
        return this.equals((batchReadBlobs_result)that);
      return false;
    }

    public boolean equals(batchReadBlobs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new BatchReadBlobsResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("batchReadBlobs_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class findMissingBlobs_args implements TBase, java.io.Serializable, Cloneable, Comparable<findMissingBlobs_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("findMissingBlobs_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public FindMissingBlobsRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, FindMissingBlobsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(findMissingBlobs_args.class, metaDataMap);
    }

    public findMissingBlobs_args() {
    }

    public findMissingBlobs_args(
      FindMissingBlobsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMissingBlobs_args(findMissingBlobs_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public findMissingBlobs_args deepCopy() {
      return new findMissingBlobs_args(this);
    }

    @Deprecated
    public findMissingBlobs_args clone() {
      return new findMissingBlobs_args(this);
    }

    public FindMissingBlobsRequest  getRequest() {
      return this.request;
    }

    public findMissingBlobs_args setRequest(FindMissingBlobsRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((FindMissingBlobsRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMissingBlobs_args)
        return this.equals((findMissingBlobs_args)that);
      return false;
    }

    public boolean equals(findMissingBlobs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findMissingBlobs_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new FindMissingBlobsRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("findMissingBlobs_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class findMissingBlobs_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findMissingBlobs_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public FindMissingBlobsResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, FindMissingBlobsResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(findMissingBlobs_result.class, metaDataMap);
    }

    public findMissingBlobs_result() {
    }

    public findMissingBlobs_result(
      FindMissingBlobsResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMissingBlobs_result(findMissingBlobs_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public findMissingBlobs_result deepCopy() {
      return new findMissingBlobs_result(this);
    }

    @Deprecated
    public findMissingBlobs_result clone() {
      return new findMissingBlobs_result(this);
    }

    public FindMissingBlobsResponse  getSuccess() {
      return this.success;
    }

    public findMissingBlobs_result setSuccess(FindMissingBlobsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public findMissingBlobs_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FindMissingBlobsResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMissingBlobs_result)
        return this.equals((findMissingBlobs_result)that);
      return false;
    }

    public boolean equals(findMissingBlobs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new FindMissingBlobsResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("findMissingBlobs_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getTree_args implements TBase, java.io.Serializable, Cloneable, Comparable<getTree_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("getTree_args");
    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);

    public GetTreeRequest request;
    public static final int REQUEST = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, GetTreeRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(getTree_args.class, metaDataMap);
    }

    public getTree_args() {
    }

    public getTree_args(
      GetTreeRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTree_args(getTree_args other) {
      if (other.isSetRequest()) {
        this.request = TBaseHelper.deepCopy(other.request);
      }
    }

    public getTree_args deepCopy() {
      return new getTree_args(this);
    }

    @Deprecated
    public getTree_args clone() {
      return new getTree_args(this);
    }

    public GetTreeRequest  getRequest() {
      return this.request;
    }

    public getTree_args setRequest(GetTreeRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    // Returns true if field request is set (has been assigned a value) and false otherwise
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((GetTreeRequest)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return getRequest();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case REQUEST:
        return isSetRequest();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTree_args)
        return this.equals((getTree_args)that);
      return false;
    }

    public boolean equals(getTree_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!TBaseHelper.equalsNobinary(this.request, that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTree_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case REQUEST:
            if (field.type == TType.STRUCT) {
              this.request = new GetTreeRequest();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("getTree_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("request");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRequest() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRequest(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getTree_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTree_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    public GetTreeResponse success;
    public ContentAddressableStorageException ex;
    public static final int SUCCESS = 0;
    public static final int EX = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, GetTreeResponse.class)));
      tmpMetaDataMap.put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(getTree_result.class, metaDataMap);
    }

    public getTree_result() {
    }

    public getTree_result(
      GetTreeResponse success,
      ContentAddressableStorageException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTree_result(getTree_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
      if (other.isSetEx()) {
        this.ex = TBaseHelper.deepCopy(other.ex);
      }
    }

    public getTree_result deepCopy() {
      return new getTree_result(this);
    }

    @Deprecated
    public getTree_result clone() {
      return new getTree_result(this);
    }

    public GetTreeResponse  getSuccess() {
      return this.success;
    }

    public getTree_result setSuccess(GetTreeResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ContentAddressableStorageException  getEx() {
      return this.ex;
    }

    public getTree_result setEx(ContentAddressableStorageException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been assigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetTreeResponse)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ContentAddressableStorageException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTree_result)
        return this.equals((getTree_result)that);
      return false;
    }

    public boolean equals(getTree_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!TBaseHelper.equalsNobinary(this.success, that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!TBaseHelper.equalsNobinary(this.ex, that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new GetTreeResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new ContentAddressableStorageException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("getTree_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("success");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getSuccess() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getSuccess(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("ex");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getEx() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getEx(), indent + 1, prettyPrint));
      }
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
