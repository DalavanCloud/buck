/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class UpdateBlobRequest implements TBase, java.io.Serializable, Cloneable, Comparable<UpdateBlobRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("UpdateBlobRequest");
  private static final TField CONTENT_DIGEST_FIELD_DESC = new TField("content_digest", TType.STRUCT, (short)1);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.STRING, (short)2);

  public Digest content_digest;
  public byte[] data;
  public static final int CONTENT_DIGEST = 1;
  public static final int DATA = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(CONTENT_DIGEST, new FieldMetaData("content_digest", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Digest.class)));
    tmpMetaDataMap.put(DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(UpdateBlobRequest.class, metaDataMap);
  }

  public UpdateBlobRequest() {
  }

  public UpdateBlobRequest(
    Digest content_digest,
    byte[] data)
  {
    this();
    this.content_digest = content_digest;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateBlobRequest(UpdateBlobRequest other) {
    if (other.isSetContent_digest()) {
      this.content_digest = TBaseHelper.deepCopy(other.content_digest);
    }
    if (other.isSetData()) {
      this.data = TBaseHelper.deepCopy(other.data);
    }
  }

  public UpdateBlobRequest deepCopy() {
    return new UpdateBlobRequest(this);
  }

  @Deprecated
  public UpdateBlobRequest clone() {
    return new UpdateBlobRequest(this);
  }

  public Digest  getContent_digest() {
    return this.content_digest;
  }

  public UpdateBlobRequest setContent_digest(Digest content_digest) {
    this.content_digest = content_digest;
    return this;
  }

  public void unsetContent_digest() {
    this.content_digest = null;
  }

  // Returns true if field content_digest is set (has been assigned a value) and false otherwise
  public boolean isSetContent_digest() {
    return this.content_digest != null;
  }

  public void setContent_digestIsSet(boolean value) {
    if (!value) {
      this.content_digest = null;
    }
  }

  public byte[]  getData() {
    return this.data;
  }

  public UpdateBlobRequest setData(byte[] data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  // Returns true if field data is set (has been assigned a value) and false otherwise
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CONTENT_DIGEST:
      if (value == null) {
        unsetContent_digest();
      } else {
        setContent_digest((Digest)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CONTENT_DIGEST:
      return getContent_digest();

    case DATA:
      return getData();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CONTENT_DIGEST:
      return isSetContent_digest();
    case DATA:
      return isSetData();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateBlobRequest)
      return this.equals((UpdateBlobRequest)that);
    return false;
  }

  public boolean equals(UpdateBlobRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_content_digest = true && this.isSetContent_digest();
    boolean that_present_content_digest = true && that.isSetContent_digest();
    if (this_present_content_digest || that_present_content_digest) {
      if (!(this_present_content_digest && that_present_content_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.content_digest, that.content_digest))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!TBaseHelper.equalsSlow(this.data, that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateBlobRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContent_digest()).compareTo(other.isSetContent_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(content_digest, other.content_digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(data, other.data);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CONTENT_DIGEST:
          if (field.type == TType.STRUCT) {
            this.content_digest = new Digest();
            this.content_digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.STRING) {
            this.data = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.content_digest != null) {
      oprot.writeFieldBegin(CONTENT_DIGEST_FIELD_DESC);
      this.content_digest.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeBinary(this.data);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("UpdateBlobRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("content_digest");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getContent_digest() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getContent_digest(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("data");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getData() == null) {
      sb.append("null");
    } else {
        int __data_size = Math.min(this. getData().length, 128);
        for (int i = 0; i < __data_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getData()[i]).length() > 1 ? Integer.toHexString(this. getData()[i]).substring(Integer.toHexString(this. getData()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getData()[i]).toUpperCase());
        }
        if (this. getData().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

