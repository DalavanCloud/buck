/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GetTreeResponse implements TBase, java.io.Serializable, Cloneable, Comparable<GetTreeResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("GetTreeResponse");
  private static final TField DIRECTORIES_FIELD_DESC = new TField("directories", TType.LIST, (short)1);
  private static final TField NEXT_PAGE_TOKEN_FIELD_DESC = new TField("next_page_token", TType.STRING, (short)2);

  public List<Directory> directories;
  public String next_page_token;
  public static final int DIRECTORIES = 1;
  public static final int NEXT_PAGE_TOKEN = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(DIRECTORIES, new FieldMetaData("directories", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Directory.class))));
    tmpMetaDataMap.put(NEXT_PAGE_TOKEN, new FieldMetaData("next_page_token", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(GetTreeResponse.class, metaDataMap);
  }

  public GetTreeResponse() {
  }

  public GetTreeResponse(
    List<Directory> directories)
  {
    this();
    this.directories = directories;
  }

  public GetTreeResponse(
    List<Directory> directories,
    String next_page_token)
  {
    this();
    this.directories = directories;
    this.next_page_token = next_page_token;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTreeResponse(GetTreeResponse other) {
    if (other.isSetDirectories()) {
      this.directories = TBaseHelper.deepCopy(other.directories);
    }
    if (other.isSetNext_page_token()) {
      this.next_page_token = TBaseHelper.deepCopy(other.next_page_token);
    }
  }

  public GetTreeResponse deepCopy() {
    return new GetTreeResponse(this);
  }

  @Deprecated
  public GetTreeResponse clone() {
    return new GetTreeResponse(this);
  }

  public List<Directory>  getDirectories() {
    return this.directories;
  }

  public GetTreeResponse setDirectories(List<Directory> directories) {
    this.directories = directories;
    return this;
  }

  public void unsetDirectories() {
    this.directories = null;
  }

  // Returns true if field directories is set (has been assigned a value) and false otherwise
  public boolean isSetDirectories() {
    return this.directories != null;
  }

  public void setDirectoriesIsSet(boolean value) {
    if (!value) {
      this.directories = null;
    }
  }

  public String  getNext_page_token() {
    return this.next_page_token;
  }

  public GetTreeResponse setNext_page_token(String next_page_token) {
    this.next_page_token = next_page_token;
    return this;
  }

  public void unsetNext_page_token() {
    this.next_page_token = null;
  }

  // Returns true if field next_page_token is set (has been assigned a value) and false otherwise
  public boolean isSetNext_page_token() {
    return this.next_page_token != null;
  }

  public void setNext_page_tokenIsSet(boolean value) {
    if (!value) {
      this.next_page_token = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case DIRECTORIES:
      if (value == null) {
        unsetDirectories();
      } else {
        setDirectories((List<Directory>)value);
      }
      break;

    case NEXT_PAGE_TOKEN:
      if (value == null) {
        unsetNext_page_token();
      } else {
        setNext_page_token((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case DIRECTORIES:
      return getDirectories();

    case NEXT_PAGE_TOKEN:
      return getNext_page_token();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case DIRECTORIES:
      return isSetDirectories();
    case NEXT_PAGE_TOKEN:
      return isSetNext_page_token();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTreeResponse)
      return this.equals((GetTreeResponse)that);
    return false;
  }

  public boolean equals(GetTreeResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_directories = true && this.isSetDirectories();
    boolean that_present_directories = true && that.isSetDirectories();
    if (this_present_directories || that_present_directories) {
      if (!(this_present_directories && that_present_directories))
        return false;
      if (!TBaseHelper.equalsNobinary(this.directories, that.directories))
        return false;
    }

    boolean this_present_next_page_token = true && this.isSetNext_page_token();
    boolean that_present_next_page_token = true && that.isSetNext_page_token();
    if (this_present_next_page_token || that_present_next_page_token) {
      if (!(this_present_next_page_token && that_present_next_page_token))
        return false;
      if (!TBaseHelper.equalsNobinary(this.next_page_token, that.next_page_token))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GetTreeResponse other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDirectories()).compareTo(other.isSetDirectories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(directories, other.directories);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNext_page_token()).compareTo(other.isSetNext_page_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(next_page_token, other.next_page_token);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case DIRECTORIES:
          if (field.type == TType.LIST) {
            {
              TList _list36 = iprot.readListBegin();
              this.directories = new ArrayList<Directory>(Math.max(0, _list36.size));
              for (int _i37 = 0; 
                   (_list36.size < 0) ? iprot.peekList() : (_i37 < _list36.size); 
                   ++_i37)
              {
                Directory _elem38;
                _elem38 = new Directory();
                _elem38.read(iprot);
                this.directories.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEXT_PAGE_TOKEN:
          if (field.type == TType.STRING) {
            this.next_page_token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.directories != null) {
      oprot.writeFieldBegin(DIRECTORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.directories.size()));
        for (Directory _iter39 : this.directories)        {
          _iter39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.next_page_token != null) {
      if (isSetNext_page_token()) {
        oprot.writeFieldBegin(NEXT_PAGE_TOKEN_FIELD_DESC);
        oprot.writeString(this.next_page_token);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("GetTreeResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("directories");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDirectories() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDirectories(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetNext_page_token())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("next_page_token");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getNext_page_token() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getNext_page_token(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

