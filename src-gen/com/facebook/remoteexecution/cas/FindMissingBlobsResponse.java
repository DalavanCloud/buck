/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class FindMissingBlobsResponse implements TBase, java.io.Serializable, Cloneable, Comparable<FindMissingBlobsResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("FindMissingBlobsResponse");
  private static final TField MISSING_BLOB_DIGESTS_FIELD_DESC = new TField("missing_blob_digests", TType.LIST, (short)1);

  public List<Digest> missing_blob_digests;
  public static final int MISSING_BLOB_DIGESTS = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(MISSING_BLOB_DIGESTS, new FieldMetaData("missing_blob_digests", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Digest.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(FindMissingBlobsResponse.class, metaDataMap);
  }

  public FindMissingBlobsResponse() {
  }

  public FindMissingBlobsResponse(
    List<Digest> missing_blob_digests)
  {
    this();
    this.missing_blob_digests = missing_blob_digests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindMissingBlobsResponse(FindMissingBlobsResponse other) {
    if (other.isSetMissing_blob_digests()) {
      this.missing_blob_digests = TBaseHelper.deepCopy(other.missing_blob_digests);
    }
  }

  public FindMissingBlobsResponse deepCopy() {
    return new FindMissingBlobsResponse(this);
  }

  @Deprecated
  public FindMissingBlobsResponse clone() {
    return new FindMissingBlobsResponse(this);
  }

  public List<Digest>  getMissing_blob_digests() {
    return this.missing_blob_digests;
  }

  public FindMissingBlobsResponse setMissing_blob_digests(List<Digest> missing_blob_digests) {
    this.missing_blob_digests = missing_blob_digests;
    return this;
  }

  public void unsetMissing_blob_digests() {
    this.missing_blob_digests = null;
  }

  // Returns true if field missing_blob_digests is set (has been assigned a value) and false otherwise
  public boolean isSetMissing_blob_digests() {
    return this.missing_blob_digests != null;
  }

  public void setMissing_blob_digestsIsSet(boolean value) {
    if (!value) {
      this.missing_blob_digests = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case MISSING_BLOB_DIGESTS:
      if (value == null) {
        unsetMissing_blob_digests();
      } else {
        setMissing_blob_digests((List<Digest>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case MISSING_BLOB_DIGESTS:
      return getMissing_blob_digests();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case MISSING_BLOB_DIGESTS:
      return isSetMissing_blob_digests();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindMissingBlobsResponse)
      return this.equals((FindMissingBlobsResponse)that);
    return false;
  }

  public boolean equals(FindMissingBlobsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_missing_blob_digests = true && this.isSetMissing_blob_digests();
    boolean that_present_missing_blob_digests = true && that.isSetMissing_blob_digests();
    if (this_present_missing_blob_digests || that_present_missing_blob_digests) {
      if (!(this_present_missing_blob_digests && that_present_missing_blob_digests))
        return false;
      if (!TBaseHelper.equalsNobinary(this.missing_blob_digests, that.missing_blob_digests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FindMissingBlobsResponse other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMissing_blob_digests()).compareTo(other.isSetMissing_blob_digests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(missing_blob_digests, other.missing_blob_digests);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case MISSING_BLOB_DIGESTS:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.missing_blob_digests = new ArrayList<Digest>(Math.max(0, _list32.size));
              for (int _i33 = 0; 
                   (_list32.size < 0) ? iprot.peekList() : (_i33 < _list32.size); 
                   ++_i33)
              {
                Digest _elem34;
                _elem34 = new Digest();
                _elem34.read(iprot);
                this.missing_blob_digests.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.missing_blob_digests != null) {
      oprot.writeFieldBegin(MISSING_BLOB_DIGESTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.missing_blob_digests.size()));
        for (Digest _iter35 : this.missing_blob_digests)        {
          _iter35.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("FindMissingBlobsResponse");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("missing_blob_digests");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getMissing_blob_digests() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getMissing_blob_digests(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

