/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GetTreeRequest implements TBase, java.io.Serializable, Cloneable, Comparable<GetTreeRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("GetTreeRequest");
  private static final TField ROOT_DIGEST_FIELD_DESC = new TField("root_digest", TType.STRUCT, (short)1);
  private static final TField PAGE_SIZE_FIELD_DESC = new TField("page_size", TType.I32, (short)2);
  private static final TField PAGE_TOKEN_FIELD_DESC = new TField("page_token", TType.STRING, (short)3);

  public Digest root_digest;
  public int page_size;
  public String page_token;
  public static final int ROOT_DIGEST = 1;
  public static final int PAGE_SIZE = 2;
  public static final int PAGE_TOKEN = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __PAGE_SIZE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ROOT_DIGEST, new FieldMetaData("root_digest", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Digest.class)));
    tmpMetaDataMap.put(PAGE_SIZE, new FieldMetaData("page_size", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PAGE_TOKEN, new FieldMetaData("page_token", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(GetTreeRequest.class, metaDataMap);
  }

  public GetTreeRequest() {
  }

  public GetTreeRequest(
    Digest root_digest)
  {
    this();
    this.root_digest = root_digest;
  }

  public GetTreeRequest(
    Digest root_digest,
    int page_size,
    String page_token)
  {
    this();
    this.root_digest = root_digest;
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    this.page_token = page_token;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTreeRequest(GetTreeRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRoot_digest()) {
      this.root_digest = TBaseHelper.deepCopy(other.root_digest);
    }
    this.page_size = TBaseHelper.deepCopy(other.page_size);
    if (other.isSetPage_token()) {
      this.page_token = TBaseHelper.deepCopy(other.page_token);
    }
  }

  public GetTreeRequest deepCopy() {
    return new GetTreeRequest(this);
  }

  @Deprecated
  public GetTreeRequest clone() {
    return new GetTreeRequest(this);
  }

  public Digest  getRoot_digest() {
    return this.root_digest;
  }

  public GetTreeRequest setRoot_digest(Digest root_digest) {
    this.root_digest = root_digest;
    return this;
  }

  public void unsetRoot_digest() {
    this.root_digest = null;
  }

  // Returns true if field root_digest is set (has been assigned a value) and false otherwise
  public boolean isSetRoot_digest() {
    return this.root_digest != null;
  }

  public void setRoot_digestIsSet(boolean value) {
    if (!value) {
      this.root_digest = null;
    }
  }

  public int  getPage_size() {
    return this.page_size;
  }

  public GetTreeRequest setPage_size(int page_size) {
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    return this;
  }

  public void unsetPage_size() {
    __isset_bit_vector.clear(__PAGE_SIZE_ISSET_ID);
  }

  // Returns true if field page_size is set (has been assigned a value) and false otherwise
  public boolean isSetPage_size() {
    return __isset_bit_vector.get(__PAGE_SIZE_ISSET_ID);
  }

  public void setPage_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__PAGE_SIZE_ISSET_ID, value);
  }

  public String  getPage_token() {
    return this.page_token;
  }

  public GetTreeRequest setPage_token(String page_token) {
    this.page_token = page_token;
    return this;
  }

  public void unsetPage_token() {
    this.page_token = null;
  }

  // Returns true if field page_token is set (has been assigned a value) and false otherwise
  public boolean isSetPage_token() {
    return this.page_token != null;
  }

  public void setPage_tokenIsSet(boolean value) {
    if (!value) {
      this.page_token = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ROOT_DIGEST:
      if (value == null) {
        unsetRoot_digest();
      } else {
        setRoot_digest((Digest)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPage_size();
      } else {
        setPage_size((Integer)value);
      }
      break;

    case PAGE_TOKEN:
      if (value == null) {
        unsetPage_token();
      } else {
        setPage_token((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROOT_DIGEST:
      return getRoot_digest();

    case PAGE_SIZE:
      return new Integer(getPage_size());

    case PAGE_TOKEN:
      return getPage_token();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ROOT_DIGEST:
      return isSetRoot_digest();
    case PAGE_SIZE:
      return isSetPage_size();
    case PAGE_TOKEN:
      return isSetPage_token();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTreeRequest)
      return this.equals((GetTreeRequest)that);
    return false;
  }

  public boolean equals(GetTreeRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_root_digest = true && this.isSetRoot_digest();
    boolean that_present_root_digest = true && that.isSetRoot_digest();
    if (this_present_root_digest || that_present_root_digest) {
      if (!(this_present_root_digest && that_present_root_digest))
        return false;
      if (!TBaseHelper.equalsNobinary(this.root_digest, that.root_digest))
        return false;
    }

    boolean this_present_page_size = true && this.isSetPage_size();
    boolean that_present_page_size = true && that.isSetPage_size();
    if (this_present_page_size || that_present_page_size) {
      if (!(this_present_page_size && that_present_page_size))
        return false;
      if (!TBaseHelper.equalsNobinary(this.page_size, that.page_size))
        return false;
    }

    boolean this_present_page_token = true && this.isSetPage_token();
    boolean that_present_page_token = true && that.isSetPage_token();
    if (this_present_page_token || that_present_page_token) {
      if (!(this_present_page_token && that_present_page_token))
        return false;
      if (!TBaseHelper.equalsNobinary(this.page_token, that.page_token))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GetTreeRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoot_digest()).compareTo(other.isSetRoot_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(root_digest, other.root_digest);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(page_size, other.page_size);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPage_token()).compareTo(other.isSetPage_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(page_token, other.page_token);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ROOT_DIGEST:
          if (field.type == TType.STRUCT) {
            this.root_digest = new Digest();
            this.root_digest.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAGE_SIZE:
          if (field.type == TType.I32) {
            this.page_size = iprot.readI32();
            setPage_sizeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAGE_TOKEN:
          if (field.type == TType.STRING) {
            this.page_token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.root_digest != null) {
      oprot.writeFieldBegin(ROOT_DIGEST_FIELD_DESC);
      this.root_digest.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetPage_size()) {
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.page_size);
      oprot.writeFieldEnd();
    }
    if (this.page_token != null) {
      if (isSetPage_token()) {
        oprot.writeFieldBegin(PAGE_TOKEN_FIELD_DESC);
        oprot.writeString(this.page_token);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("GetTreeRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("root_digest");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRoot_digest() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getRoot_digest(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetPage_size())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("page_size");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getPage_size(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetPage_token())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("page_token");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getPage_token() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getPage_token(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

