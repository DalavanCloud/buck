{namespace buck.commonparameters}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Common Parameters' /}
    {param description}
      Command line parameters that affect all commands.
    {/param}
    {param content}


{call buck.command}
{param overview}

<p>Some command line parameters affect the operation of Buck itself, regardless
of which subcommand is being run.

<pre>buck targets --verbose 10</pre>
</p>
{/param}

{param params}

{call buck.param}
  {param name: 'verbose' /}
  {param desc}
Sets the verbosity level of the console output.
  {/param}
{/call}

{call buck.param}
  {param name: 'no-cache' /}
  {param desc}
Disables the build artifact cache.
  {/param}
{/call}

{call buck.param}
  {param name: 'config' /}
  {param desc}
Overrides settings specified in <a href="{ROOT}concept/buckconfig.html#buildfile">.buckconfig</a>.

<p>
<pre>buck build --config cache.mode=dir ...</pre>
</p>

<p>Note that overriding values of <code>.buckconfig</code> from the command line
makes reproducing the build very hard. The preferred method of overriding values
of <code>.buckconfig</code> is via <code>.buckconfig.local</code>.
</p>
  {/param}
{/call}


{call buck.param}
  {param name: '@/path/to/commandline-args' /}
  {param nodash: true /}
  {param desc}
Additional command line arguments can be stored in external files, one argument per line.
These arguments can also be <code>@</code> arguments, which will include a second file's
contents as arguments.

{literal}<pre class = "prettyprint lang-ini">
# File config/common
--verbose

# File config/gcc
@config/common
--config
cxx.cxx=/usr/bin/g++
...

# File config/clang
@config/common
--config
cxx.cxx=/usr/bin/clang++
...

buck build @config/gcc foo/bar:
buck build @config/clang foo/bar:
</pre>{/literal}

<p>
If Buck is regularly invoked with different sets of arguments, this is the 
preferred approach, as argument files can be stored in source control, making builds
more reproducible.
</p>
  {/param}
{/call}

{/param}

{/call}
    {/param}  // content
  {/call} // buck.page
{/template}
