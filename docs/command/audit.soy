{namespace buck.audit}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck audit' /}
    {param navid: 'command_audit' /}
    {param prettify: true /}
    {param description}
      Provide build information about build targets and outputs.
    {/param}
    {param content}

{call buck.command}
{param overview}

<p>
Provide build information about build targets and outputs.
</p>

<p>
Syntax:
</p>

<pre>buck audit &lt;command&gt; [ &lt;parameter&gt; . . . ] &lt;target&gt;  . . .</pre> 

<p>
Example:
</p>

<pre>buck audit input /&#x2F;java/com/example/app:amazing</pre>

<p>
For more examples, see the <b>Examples</b> section below.
</p>

<h2>Commands</h2>

<ul class="{css arglist}">
  {call buck.param}
    {param name: 'alias --list' /}
    {param nodash: true /}
    {param desc}
    List the aliases declared in
    either {call buck.concept_buckconfig /} or <tt>.buckconfig.local</tt>.
   {/param}
  {/call}

  {call buck.param}
    {param name: 'classpath <targets>' /}
    {param nodash: true /}
    {param desc}
    List the classpath used to run the given targets. This does
    not work for all build rule types.
    {/param}
  {/call}

  {call buck.param}
    {param name: 'config <section.property> [,...]' /}
    {param nodash: true /}
    {param desc}
    List values from <code>.buckconfig</code> (and
    {sp}<code>.buckconfig.local</code>) for the specified
    sections and properties. Use <code>--tab</code> to get tab-delimited
    details. For example, to get the C and C++ compiler, use
    {literal}
    <pre class="prettyprint lang-py">
buck audit config invalid_section.novalue cxx.cc cxx.cxx
</pre>

<pre class="prettyprint lang-py">
[cxx]
    cc = /usr/bin/gcc
    cxx = /usr/bin/g++
</pre>
    {/literal}
<p>
or
</p>
    {literal}
    <pre class="prettyprint lang-py">
buck audit config --tab invalid_section.novalue cxx.cc cxx.cxx
</pre>
<pre class="prettyprint lang-py">
invalid_section.novalue&#9;
cxx.cc&#9;/usr/bin/gcc
cxx.cxx&#9;/usr/bin/g++
</pre>
    {/literal}
    {/param}
  {/call}

  {call buck.param}
    {param name: 'dependencies <targets>' /}
    {param nodash: true /}
    {param desc}
    List the dependencies used to build the given targets. Results are
    listed in alphabetical order. By default, only direct dependencies
    are listed; to show transitive dependencies, use 
    the <code>--transitive</code> parameter.  To show tests for a rule, use
    the <code>--include-tests</code> parameter. This prints out a rule's
    tests as if they were dependencies of the rule.  To print out all of
    the <em>test's</em> dependencies as well, 
    combine <code>--include-tests</code> with the <code>--transitive</code> parameter. 

    {/param}
  {/call}

  {call buck.param}
    {param name: 'flavors <targets>' /}
    {param nodash: true /}
    {param desc}
    List the flavors that are available for the specified targets and
    what the default flavor is for each target. 
    If the <code>flavors</code> command prints <code>no flavors</code>, 
    it indicates that, although the target rule supports flavors, Buck 
    was not able to extract any. If the <code>flavors</code> command 
    prints <code>unknown</code>, it indicates that the target rule
    doesn't support flavors. The <code>flavors</code> command supports
    the <code>--json</code> parameter for JSON-formatted output.
   {/param}
  {/call}

  {call buck.param}
    {param name: 'input <targets>' /}
    {param nodash: true /}
    {param desc}
    List the input source and resource files used to build the
    given targets.
   {/param}
  {/call}

  {call buck.param}
    {param name: 'includes <build_file>' /}
    {param nodash: true /}
    {param desc}
        List the {call buck.build_file /}s, and their extensions, that 
        are included in the given build file.
    {/param}
  {/call}

  {call buck.param}
    {param name: 'modules' /}
    {param nodash: true /}
    {param desc}
        List the modules known by Buck as well as their content hashes and dependencies.
    {/param}
  {/call}

  {call buck.param}
    {param name: 'tests <targets>' /}
    {param nodash: true /}
    {param desc}
    List the tests for the given targets. Results are listed in alphabetical
    order. Only tests for the given targets are printed, though multiple
    targets may be specified on a single command line. 
    This command is intended to be used in
    conjunction with the <code>audit dependencies</code> command. For example,
    to retrieve a list of all tests for a given project, use:
    <br>
    <br>
    <pre>
    buck audit dependencies --transitive PROJECT | xargs buck audit tests
    </pre>
    {/param}
  {/call}
</ul>
{/param}

{param params}

{call buck.param}
  {param name: 'include-tests' /}
  {param desc}
  Show the tests for the specified targets. Can be combined with 
  the <code>--transitive</code> parameter. For more information, see 
  the <code>dependencies</code> command.   
  {/param}
{/call}

{call buck.param}
  {param name: 'json' /}
  {param desc}
  Output the results as JSON.
  {/param}
{/call}

{call buck.param}
  {param name: 'list' /}
  {param desc}
  List <code>.buckconfig</code> and <code>.buckconfig.local</code> aliases. 
  Used only with the <code>aliases</code> command. For more information, see 
  that command.
  {/param}
{/call}

{call buck.param}
  {param name: 'tab' /}
  {param desc}
  Output the results using tab delimiters.
  Used only with the <code>config</code> command. For more information, see 
  that command.
  {/param}
{/call}

{call buck.param}
  {param name: 'transitive' /}
  {param desc}
  Show transitive dependencies in addition to direct dependencies. Can
  be combined with the <code>--include-tests</code> parameter. For
  more information, see the <code>dependencies</code> command. 
  {/param}
{/call}


{/param}

{param examples}

<pre class="prettyprint lang-py">
{literal}
# For all of the following examples, assume this BUCK file exists in
# the `examples` directory.
java_library(
  name = 'one',
  srcs = [ '1.txt' ],
  deps = [
    ':two',
    ':three',
  ],
)

java_library(
  name = 'two',
  srcs = [ '2.txt' ],
  deps = [
    ':four',
  ],
)

java_library(
  name = 'three',
  srcs = [ '3.txt' ],
  deps = [
    ':four',
    ':five',
  ],
)

java_library(
  name = 'four',
  srcs = [ '4.txt' ],
  deps = [
    ':five',
  ]
)

java_library(
  name = 'five',
  srcs = [ '5.txt' ],
)
{/literal}
</pre>

Lists all of the source files used to build the <code>one</code> library
<pre>buck audit input /&#x2F;examples:one</pre>
<pre>
examples/1.txt{\n}
examples/2.txt{\n}
examples/3.txt{\n}
examples/4.txt{\n}
examples/5.txt{\n}
</pre>

Outputs a JSON representation of all of the source files used to build the{sp}
<code>two</code> library. In this JSON object, each key is a build target and
each value is an array of the source paths used to build that rule.
<pre>buck audit input --json /&#x2F;examples:two</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["examples/2.txt"],
  "//examples:four": ["examples/4.txt"],
  "//examples:five": ["examples/5.txt"],
}
{/literal}
</pre>

Lists all of the rules that the <code>one</code> library directly depends on
<pre>buck audit dependencies /&#x2F;examples:one</pre>
<pre>
{literal}
//examples:three
//examples:two
{/literal}
</pre>

Lists all of the rules that the <code>one</code> library transitively depends on
<pre>buck audit dependencies --transitive /&#x2F;examples:one</pre>
<pre>
{literal}
//examples:five
//examples:four
//examples:three
//examples:two
{/literal}
</pre>

Outputs a JSON representation of all of the rules that the <code>two</code>{sp}
library transitively depends on.
<pre>buck audit dependencies --transitive --json /&#x2F;examples:two</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["//examples:five","//examples:four"]
}
{/literal}
</pre>

Outputs a JSON representation of the direct dependencies of the{sp}
<code>two</code> and <code>three</code> libraries.
<pre>buck audit dependencies --json /&#x2F;examples:two /&#x2F;examples:three</pre>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:three": ["//examples:five","//examples:four"],
  "//examples:two": ["//examples:four"]
}
{/literal}
</pre>

{/param}

{/call}


<h2>See also</h2>

<p>
{call buck.concept_buckconfig /}
</p>

<p>
{call buck.build_file /} 
</p>

    {/param}  // content
  {/call} // buck.page
{/template}

