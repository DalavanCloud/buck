RULES_SRCS = [
  'JsonConcatenate.java',
]
java_library(
  name = 'rules',
  srcs = RULES_SRCS,
  autodeps = True,
  visibility = [ 'PUBLIC' ],
)

STEPS_SRCS = [
  'JsonConcatenateStep.java',
]
java_library(
  name = 'steps',
  srcs = STEPS_SRCS,
  autodeps = True,
  visibility = [ 'PUBLIC' ],
)

java_immutables_library(
  name = 'json',
  srcs = glob(['*.java'], excludes = RULES_SRCS + STEPS_SRCS),
  immutable_types = [
    'ProjectBuildFileParserOptions',
    'BuildFileParseExceptionData',
    'BuildFileParseExceptionStackTraceEntry',
    'BuildFileSyntaxError',
  ],
  tests = [
    '//test/com/facebook/buck/json:json',
  ],
  resources = [
    ':pywatchman-archive',
    ':pathlib-archive',
    '//src/com/facebook/buck/json:python_bundle',
  ],
  autodeps = True,
  visibility = [
    'PUBLIC',
  ],
)

export_file(
  name = 'pathlib-archive',
  out = 'pathlib-archive.zip',
  src = '//third-party/py/pathlib:pathlib-archive',
)


export_file(
  name = 'pywatchman-archive',
  out = 'pywatchman-archive.zip',
  src = '//third-party/py/pywatchman:pywatchman-archive',
)

PYTHON_PROD_SRCS = glob(['buck_parser/**/*.py'], excludes=['buck_parser/**/*_test.py'])

zip_file(
  name = 'python_bundle',
  srcs = PYTHON_PROD_SRCS,
)

python_library(
  name = 'buck_parser',
  srcs = PYTHON_PROD_SRCS,
  base_module = '',
  deps = [
    '//third-party/py/pathlib:pathlib',
    '//third-party/py/pywatchman:pywatchman',
    '//third-party/py/scandir:scandir',
  ],
)

python_test(
  name = 'buck_test',
  srcs = glob(['buck_parser/**/*_test.py']),
  base_module = '',
  deps = [
    ':buck_parser',
    '//third-party/py/pathlib:pathlib',
    '//third-party/py/pywatchman:pywatchman',
  ],
)

# Main binary for testing.
python_binary(
  name = 'standalone',
  base_module = '',
  main_module = 'buck_parser',
  deps = [
    ':buck_parser',
  ]
)