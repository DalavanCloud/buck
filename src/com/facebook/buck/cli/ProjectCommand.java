/*
 * Copyright 2012-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.facebook.buck.cli;

import com.facebook.buck.apple.AppleBuildRules;
import com.facebook.buck.apple.XcodeProjectConfigDescription;
import com.facebook.buck.apple.XcodeWorkspaceConfigDescription;
import com.facebook.buck.apple.xcode.ProjectGenerator;
import com.facebook.buck.apple.xcode.SeparatedProjectsGenerator;
import com.facebook.buck.apple.xcode.WorkspaceAndProjectGenerator;
import com.facebook.buck.command.Project;
import com.facebook.buck.java.JavaLibraryDescription;
import com.facebook.buck.json.BuildFileParseException;
import com.facebook.buck.log.Logger;
import com.facebook.buck.model.BuildTarget;
import com.facebook.buck.model.BuildTargetException;
import com.facebook.buck.model.HasBuildTarget;
import com.facebook.buck.model.HasSourceUnderTest;
import com.facebook.buck.parser.NoSuchBuildTargetException;
import com.facebook.buck.parser.TargetNodePredicateSpec;
import com.facebook.buck.rules.ActionGraph;
import com.facebook.buck.rules.AssociatedTargetNodePredicate;
import com.facebook.buck.rules.BuildRule;
import com.facebook.buck.rules.BuildRuleResolver;
import com.facebook.buck.rules.BuildRuleType;
import com.facebook.buck.rules.ProjectConfig;
import com.facebook.buck.rules.ProjectConfigDescription;
import com.facebook.buck.rules.SourcePathResolver;
import com.facebook.buck.rules.TargetGraph;
import com.facebook.buck.rules.TargetNode;
import com.facebook.buck.step.ExecutionContext;
import com.facebook.buck.util.HumanReadableException;
import com.facebook.buck.util.ProcessManager;
import com.google.common.base.Charsets;
import com.google.common.base.Function;
import com.google.common.base.Functions;
import com.google.common.base.Optional;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.base.Predicates;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Iterables;
import com.google.common.io.Files;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class ProjectCommand extends AbstractCommandRunner<ProjectCommandOptions> {

  private static final Logger LOG = Logger.get(ProjectCommand.class);

  /**
   * Include java library targets (and android library targets) that use annotation
   * processing.  The sources generated by these annotation processors is needed by
   * IntelliJ.
   */
  private static final Predicate<TargetNode<?>> ANNOTATION_PREDICATE =
      new Predicate<TargetNode<?>>() {
        @Override
        public boolean apply(TargetNode<?> input) {
          if (input.getType() != JavaLibraryDescription.TYPE) {
            return false;
          }
          JavaLibraryDescription.Arg arg = ((JavaLibraryDescription.Arg) input.getConstructorArg());
          return !arg.annotationProcessors.get().isEmpty();
        }
      };

  private static final String XCODE_PROCESS_NAME = "Xcode";

  private static class TargetGraphAndTargets {
    private final TargetGraph targetGraph;
    private final TargetGraph fullGraph;
    private final ImmutableSet<TargetNode<?>> projectRoots;
    private final ImmutableSet<TargetNode<?>> associatedTests;
    private final ImmutableSet<TargetNode<?>> associatedProjects;

    public TargetGraphAndTargets(
        TargetGraph targetGraph,
        TargetGraph fullGraph,
        ImmutableSet<TargetNode<?>> projectRoots,
        ImmutableSet<TargetNode<?>> associatedTests,
        ImmutableSet<TargetNode<?>> associatedProjects) {
      this.targetGraph = targetGraph;
      this.fullGraph = fullGraph;
      this.projectRoots = projectRoots;
      this.associatedTests = associatedTests;
      this.associatedProjects = associatedProjects;
    }

    public TargetGraph getTargetGraph() {
      return targetGraph;
    }

    public TargetGraph getFullGraph() {
      return fullGraph;
    }

    public ImmutableSet<TargetNode<?>> getProjectRoots() {
      return projectRoots;
    }

    public ImmutableSet<TargetNode<?>> getAssociatedTests() {
      return associatedTests;
    }

    public ImmutableSet<TargetNode<?>> getAssociatedProjects() {
      return associatedProjects;
    }
  }

  public ProjectCommand(CommandRunnerParams params) {
    super(params);
  }

  @Override
  ProjectCommandOptions createOptions(BuckConfig buckConfig) {
    return new ProjectCommandOptions(buckConfig);
  }

  @Override
  int runCommandWithOptionsInternal(ProjectCommandOptions options)
      throws IOException, InterruptedException {
    switch (options.getIde()) {
      case INTELLIJ:
        return runIntellijProjectGenerator(options);
      case XCODE:
        return runXcodeProjectGenerator(options);
      default:
        // unreachable
        throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
    }
  }

  /**
   * Run intellij specific project generation actions.
   */
  int runIntellijProjectGenerator(ProjectCommandOptions options)
      throws IOException, InterruptedException {
    // Create an ActionGraph that only contains targets that can be represented as IDE
    // configuration files.
    TargetGraph fullGraph;
    ActionGraph actionGraph;

    try {
      TargetGraphAndTargets targetGraphAndTargets = createTargetGraph(options);
      fullGraph = targetGraphAndTargets.getFullGraph();
      actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();
    } catch (BuildTargetException | BuildFileParseException e) {
      throw new HumanReadableException(e);
    }

    ExecutionContext executionContext = createExecutionContext(
        options,
        actionGraph);

    Project project = new Project(
        new SourcePathResolver(new BuildRuleResolver(actionGraph.getNodes())),
        ImmutableSet.copyOf(
            FluentIterable
                .from(actionGraph.getNodes())
                .filter(
                    new Predicate<BuildRule>() {
                      @Override
                      public boolean apply(BuildRule input) {
                        return input instanceof ProjectConfig;
                      }
                    })
                .transform(
                    new Function<BuildRule, ProjectConfig>() {
                      @Override
                      public ProjectConfig apply(BuildRule input) {
                        return (ProjectConfig) input;
                      }
                    }
                )),
        actionGraph,
        options.getBasePathToAliasMap(),
        options.getJavaPackageFinder(),
        executionContext,
        getProjectFilesystem(),
        options.getPathToDefaultAndroidManifest(),
        options.getPathToPostProcessScript(),
        options.getBuckConfig().getPythonInterpreter(),
        getObjectMapper());

    File tempDir = Files.createTempDir();
    File tempFile = new File(tempDir, "project.json");
    int exitCode;
    try {
      exitCode = project.createIntellijProject(
          tempFile,
          executionContext.getProcessExecutor(),
          !options.getArgumentsFormattedAsBuildTargets().isEmpty(),
          console.getStdOut(),
          console.getStdErr());
      if (exitCode != 0) {
        return exitCode;
      }

      List<String> additionalInitialTargets = ImmutableList.of();
      if (options.shouldProcessAnnotations()) {
        try {
          additionalInitialTargets = getAnnotationProcessingTargets(fullGraph, options);
        } catch (BuildTargetException | BuildFileParseException e) {
          throw new HumanReadableException(e);
        }
      }

      // Build initial targets.
      if (options.hasInitialTargets() || !additionalInitialTargets.isEmpty()) {
        BuildCommand buildCommand = new BuildCommand(getCommandRunnerParams());
        BuildCommandOptions buildOptions =
            options.createBuildCommandOptionsWithInitialTargets(additionalInitialTargets);


        exitCode = buildCommand.runCommandWithOptions(buildOptions);
        if (exitCode != 0) {
          return exitCode;
        }
      }
    } finally {
      // Either leave project.json around for debugging or delete it on exit.
      if (console.getVerbosity().shouldPrintOutput()) {
        getStdErr().printf("project.json was written to %s", tempFile.getAbsolutePath());
      } else {
        tempFile.delete();
        tempDir.delete();
      }
    }

    if (options.getArguments().isEmpty()) {
      String greenStar = console.getAnsi().asHighlightedSuccessText(" * ");
      getStdErr().printf(
          console.getAnsi().asHighlightedSuccessText("=== Did you know ===") + "\n" +
              greenStar + "You can run `buck project <target>` to generate a minimal project " +
              "just for that target.\n" +
              greenStar + "This will make your IDE faster when working on large projects.\n" +
              greenStar + "See buck project --help for more info.\n" +
              console.getAnsi().asHighlightedSuccessText(
                  "--=* Knowing is half the battle!") + "\n");
    }

    return 0;
  }

  ImmutableList<String> getAnnotationProcessingTargets(
      TargetGraph fullGraph,
      ProjectCommandOptions options)
      throws BuildTargetException, BuildFileParseException, IOException, InterruptedException {
    ImmutableSet<BuildTarget> buildTargets = getRootsFromOptionsWithPredicate(
        fullGraph,
        options,
        ANNOTATION_PREDICATE);
    return FluentIterable
        .from(buildTargets)
        .transform(Functions.toStringFunction())
        .toList();
  }

  /**
   * Run xcode specific project generation actions.
   */
  int runXcodeProjectGenerator(ProjectCommandOptions options)
      throws IOException, InterruptedException {
    checkForAndKillXcodeIfRunning(options.getIdePrompt());

    TargetGraphAndTargets targetGraphAndTargets;
    try {
      targetGraphAndTargets = createTargetGraph(options);
    } catch (BuildTargetException | BuildFileParseException e) {
      throw new HumanReadableException(e);
    }

    ImmutableSet<BuildTarget> passedInTargetsSet;

    try {
      ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
      passedInTargetsSet = ImmutableSet.copyOf(getBuildTargets(argumentsAsBuildTargets));
    } catch (NoSuchBuildTargetException e) {
      throw new HumanReadableException(e);
    }

    ActionGraph actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();
    ExecutionContext executionContext = createExecutionContext(options, actionGraph);
    BuildRuleResolver buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());
    SourcePathResolver sourcePathResolver = new SourcePathResolver(buildRuleResolver);

    ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder = ImmutableSet.builder();
    if (options.getReadOnly()) {
      optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
    }
    if (options.isWithTests()) {
      optionsBuilder.add(ProjectGenerator.Option.INCLUDE_TESTS);
    }

    if (options.getCombinedProject() || options.getWorkspaceAndProjects()) {
      boolean combinedProject = options.getCombinedProject();
      if (combinedProject && passedInTargetsSet.size() != 1) {
        throw new HumanReadableException(
            "Combined project can only be generated for one target at a time");
      }
      ImmutableSet<BuildTarget> targets;
      if (passedInTargetsSet.isEmpty()) {
        targets = FluentIterable
            .from(targetGraphAndTargets.getProjectRoots())
            .transform(HasBuildTarget.TO_TARGET)
            .toSet();
      } else {
        targets = passedInTargetsSet;
      }
      if (!combinedProject) {
        optionsBuilder.addAll(ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
      }
      LOG.debug("Generating workspace for config targets %s", targets);
      Map<TargetNode<?>, ProjectGenerator> projectGenerators = new HashMap<>();
      ImmutableSet<TargetNode<?>> testTargetNodes = targetGraphAndTargets.getAssociatedTests();
      ImmutableMultimap<BuildTarget, TargetNode<?>> sourceTargetToTestNodes =
          AppleBuildRules.getSourceTargetToTestNodesMap(testTargetNodes);
      for (BuildTarget workspaceTarget : targets) {
        TargetNode<?> workspaceNode = Preconditions.checkNotNull(
            targetGraphAndTargets.getTargetGraph().get(workspaceTarget));
        if (workspaceNode.getType() != XcodeWorkspaceConfigDescription.TYPE) {
          throw new HumanReadableException(
              "%s must be a xcode_workspace_config",
              workspaceTarget);
        }
        WorkspaceAndProjectGenerator generator = new WorkspaceAndProjectGenerator(
            getProjectFilesystem(),
            targetGraphAndTargets.getTargetGraph(),
            executionContext,
            buildRuleResolver,
            sourcePathResolver,
            castToXcodeWorkspaceTargetNode(workspaceNode),
            optionsBuilder.build(),
            sourceTargetToTestNodes,
            combinedProject);
        generator.generateWorkspaceAndDependentProjects(projectGenerators);
      }
    } else {
      // Generate projects based on xcode_project_config rules, and place them in the same directory
      // as the Buck file.

      ImmutableSet<BuildTarget> targets;
      if (passedInTargetsSet.isEmpty()) {
        targets = FluentIterable
            .from(targetGraphAndTargets.getAssociatedProjects())
            .transform(HasBuildTarget.TO_TARGET)
            .toSet();
      } else {
        targets = passedInTargetsSet;
      }

      SeparatedProjectsGenerator projectGenerator = new SeparatedProjectsGenerator(
          getProjectFilesystem(),
          targetGraphAndTargets.getTargetGraph(),
          executionContext,
          buildRuleResolver,
          sourcePathResolver,
          targets,
          optionsBuilder.build());
      projectGenerator.generateProjects();
    }

    return 0;
  }

  @SuppressWarnings(value = "unchecked")
  private static TargetNode<XcodeWorkspaceConfigDescription.Arg> castToXcodeWorkspaceTargetNode(
      TargetNode<?> targetNode) {
    Preconditions.checkArgument(targetNode.getType() == XcodeWorkspaceConfigDescription.TYPE);
    return (TargetNode<XcodeWorkspaceConfigDescription.Arg>) targetNode;
  }

  private void checkForAndKillXcodeIfRunning(boolean enablePrompt)
      throws InterruptedException, IOException {
    Optional<ProcessManager> processManager = getProcessManager();
    if (!processManager.isPresent()) {
      LOG.warn("Could not check if Xcode is running (no process manager)");
      return;
    }

    if (!processManager.get().isProcessRunning(XCODE_PROCESS_NAME)) {
      LOG.debug("Xcode is not running.");
      return;
    }

    if (enablePrompt && canPrompt()) {
      if (prompt(
              "Xcode is currently running. Buck will modify files Xcode currently has " +
              "open, which can cause it to become unstable.\n\n" +
              "Kill Xcode and continue?")) {
        processManager.get().killProcess(XCODE_PROCESS_NAME);
      } else {
        console.getStdOut().println(
            console.getAnsi().asWarningText(
                "Xcode is running. Generated projects might be lost or corrupted if Xcode " +
                "currently has them open."));
      }
      console.getStdOut().format(
          "To disable this prompt in the future, add the following to %s: \n\n" +
              "[project]\n" +
              "  ide_prompt = false\n\n",
          getProjectFilesystem()
              .getRootPath()
              .resolve(BuckConfig.DEFAULT_BUCK_CONFIG_OVERRIDE_FILE_NAME)
              .toAbsolutePath());
    } else {
      LOG.debug(
          "Xcode is running, but cannot prompt to kill it (enabled %s, can prompt %s)",
          enablePrompt, canPrompt());
    }
  }

  private boolean canPrompt() {
    return System.console() != null;
  }

  private boolean prompt(String prompt) throws IOException {
    Preconditions.checkState(canPrompt());

    LOG.debug("Displaying prompt %s..", prompt);
    console.getStdOut().print(console.getAnsi().asWarningText(prompt + " [Y/n] "));

    Optional<String> result;
    try (InputStreamReader stdinReader = new InputStreamReader(System.in, Charsets.UTF_8);
         BufferedReader bufferedStdinReader = new BufferedReader(stdinReader)) {
      result = Optional.fromNullable(bufferedStdinReader.readLine());
    }
    LOG.debug("Result of prompt: [%s]", result);
    return result.isPresent() &&
      (result.get().isEmpty() || result.get().toLowerCase(Locale.US).startsWith("y"));
  }

  private ImmutableSet<BuildTarget> getRootsFromOptionsWithPredicate(
      TargetGraph fullGraph,
      ProjectCommandOptions options,
      Predicate<TargetNode<?>> rootsPredicate)
      throws BuildFileParseException, BuildTargetException, InterruptedException, IOException {
    ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
    if (!argumentsAsBuildTargets.isEmpty()) {
      return getBuildTargets(argumentsAsBuildTargets);
    }
    return FluentIterable
        .from(fullGraph.getNodes())
        .filter(rootsPredicate)
        .transform(HasBuildTarget.TO_TARGET)
        .toSet();
  }

  private TargetGraphAndTargets createTargetGraph(final ProjectCommandOptions options)
      throws BuildFileParseException, BuildTargetException, InterruptedException, IOException {
    Predicate<TargetNode<?>> projectRootsPredicate;
    AssociatedTargetNodePredicate associatedProjectPredicate;

    // Prepare the predicates to create the project graph based on the IDE.
    switch (options.getIde()) {
      case INTELLIJ:
        projectRootsPredicate = new Predicate<TargetNode<?>>() {
          @Override
          public boolean apply(TargetNode<?> input) {
            return input.getType() == ProjectConfigDescription.TYPE;
          }
        };
        associatedProjectPredicate = new AssociatedTargetNodePredicate() {
          @Override
          public boolean apply(TargetNode<?> targetNode, TargetGraph targetGraph) {
            ProjectConfigDescription.Arg projectArg;
            if (targetNode.getType() == ProjectConfigDescription.TYPE) {
              projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();
            } else {
              return false;
            }

            BuildTarget projectTarget = null;
            if (projectArg.srcTarget.isPresent()) {
              projectTarget = projectArg.srcTarget.get();
            } else if (projectArg.testTarget.isPresent()) {
              projectTarget = projectArg.testTarget.get();
            }
            return (projectTarget != null && targetGraph.get(projectTarget) != null);
          }
        };
        break;
      case XCODE:
        final ImmutableSet<String> defaultExcludePaths = options.getDefaultExcludePaths();
        final ImmutableSet<BuildTarget> passedInTargetsSet =
            ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));

        projectRootsPredicate = new Predicate<TargetNode<?>>() {
          @Override
          public boolean apply(TargetNode<?> input) {
            BuildRuleType filterType = options.getWorkspaceAndProjects() ?
                XcodeWorkspaceConfigDescription.TYPE :
                XcodeProjectConfigDescription.TYPE;
            if (filterType != input.getType()) {
              return false;
            }

            String targetName = input.getBuildTarget().getFullyQualifiedName();
            for (String prefix : defaultExcludePaths) {
              if (targetName.startsWith("//" + prefix) &&
                  !passedInTargetsSet.contains(input.getBuildTarget())) {
                LOG.debug(
                    "Ignoring build target %s (exclude_paths contains %s)",
                    input.getBuildTarget(),
                    prefix);
                return false;
              }
            }
            return true;
          }
        };
        associatedProjectPredicate = new AssociatedTargetNodePredicate() {
          @Override
          public boolean apply(
              TargetNode<?> targetNode, TargetGraph targetGraph) {
            XcodeProjectConfigDescription.Arg projectArg;
            if (targetNode.getType() == XcodeProjectConfigDescription.TYPE) {
              projectArg = (XcodeProjectConfigDescription.Arg) targetNode.getConstructorArg();
            } else {
              return false;
            }

            for (BuildTarget includedBuildTarget : projectArg.rules) {
              if (targetGraph.get(includedBuildTarget) != null) {
                return true;
              }
            }

            return false;
          }
        };
        break;
      default:
        // unreachable
        throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
    }

    TargetGraph fullGraph = getParser().buildTargetGraphForTargetNodeSpecs(
        ImmutableList.of(
            new TargetNodePredicateSpec(
                Predicates.<TargetNode<?>>alwaysTrue(),
                getProjectFilesystem().getIgnorePaths())),
        options.getDefaultIncludes(),
        getBuckEventBus(),
        console,
        environment,
        options.getEnableProfiling());

    // Create the main graph. This contains all the targets in the project slice, or all the valid
    // project roots if a project slice is not specified, and their transitive dependencies.
    ImmutableSet<TargetNode<?>> projectRoots = ImmutableSet.copyOf(
        fullGraph.getAll(
            getRootsFromOptionsWithPredicate(
                fullGraph,
                options,
                projectRootsPredicate)));

    // Optionally create the test graph. This contains all the tests that cover targets in the main
    // graph, all the transitive dependencies of those tests, and all the targets in the main graph.
    ImmutableSet<TargetNode<?>> associatedTests = ImmutableSet.of();
    if (options.isWithTests()) {
      AssociatedTargetNodePredicate associatedTestsPredicate = new AssociatedTargetNodePredicate() {
        @Override
        public boolean apply(TargetNode<?> targetNode, TargetGraph targetGraph) {
          if (!targetNode.getType().isTestRule()) {
            return false;
          }
          ImmutableSortedSet<BuildTarget> sourceUnderTest;
          if (targetNode.getConstructorArg() instanceof HasSourceUnderTest) {
            HasSourceUnderTest argWithSourceUnderTest =
                (HasSourceUnderTest) targetNode.getConstructorArg();
            sourceUnderTest = argWithSourceUnderTest.getSourceUnderTest();
          } else {
            return false;
          }

          for (BuildTarget buildTargetUnderTest : sourceUnderTest) {
            if (targetGraph.get(buildTargetUnderTest) != null) {
              return true;
            }
          }

          return false;
        }
      };

      associatedTests = getAssociatedTargetNodes(
          fullGraph,
          projectRoots,
          associatedTestsPredicate);
    }

    ImmutableSet<TargetNode<?>> associatedProjects = getAssociatedTargetNodes(
        fullGraph,
        Iterables.concat(projectRoots, associatedTests),
        associatedProjectPredicate);

    TargetGraph targetGraph = fullGraph.getSubgraph(
        Iterables.concat(projectRoots, associatedTests, associatedProjects));

    return new TargetGraphAndTargets(
        targetGraph,
        fullGraph,
        projectRoots,
        associatedTests,
        associatedProjects);
  }

  /**
   * @param fullGraph A TargetGraph containing all nodes that could be related.
   * @param subgraphRoots Target nodes forming the roots of the subgraph to which the returned nodes
   *                      are related.
   * @param associatedTargetNodePredicate A predicate to determine whether a node is related or not.
   * @return A set of nodes related to {@code subgraphRoots} or their dependencies.
   */
  private ImmutableSet<TargetNode<?>> getAssociatedTargetNodes(
      TargetGraph fullGraph,
      Iterable<TargetNode<?>> subgraphRoots,
      final AssociatedTargetNodePredicate associatedTargetNodePredicate)
      throws BuildFileParseException, BuildTargetException, InterruptedException, IOException {
    final TargetGraph subgraph = fullGraph.getSubgraph(subgraphRoots);

    return FluentIterable
        .from(fullGraph.getNodes())
        .filter(
            new Predicate<TargetNode<?>>() {
              @Override
              public boolean apply(TargetNode<?> node) {
                return associatedTargetNodePredicate.apply(node, subgraph);
              }
            })
        .toSet();
  }

  @Override
  String getUsageIntro() {
    return "generates project configuration files for an IDE";
  }
}
